(function() {
    // PosterGrid 类 - 管理电视剧海报网格显示
    class PosterGrid {
        
        /**
         * 获取中文字符的拼音首字母
         * @param {string} str - 中文字符串
         * @returns {string} 拼音首字母
         */
        getPinyinFirstLetter(str) {
            // 简化的拼音首字母映射表（实际项目中可能需要更完整的映射表或使用第三方库）
            const pinyinMap = {
                // A
                '啊': 'A', '阿': 'A', '哎': 'A', '哀': 'A', '皑': 'A', '癌': 'A', '蔼': 'A', '矮': 'A', '艾': 'A', '碍': 'A', '爱': 'A', '隘': 'A',
                // B
                '八': 'B', '巴': 'B', '叭': 'B', '扒': 'B', '吧': 'B', '笆': 'B', '八': 'B', '疤': 'B', '捌': 'B', '拔': 'B', '跋': 'B', '把': 'B', '坝': 'B', '霸': 'B', '罢': 'B', '爸': 'B',
                // C
                '擦': 'C', '猜': 'C', '裁': 'C', '材': 'C', '才': 'C', '财': 'C', '睬': 'C', '踩': 'C', '采': 'C', '彩': 'C', '菜': 'C', '蔡': 'C', '餐': 'C', '参': 'C', '蚕': 'C', '残': 'C', '惭': 'C', '惨': 'C', '灿': 'C', '苍': 'C', '舱': 'C', '仓': 'C', '沧': 'C', '藏': 'C', '操': 'C', '糙': 'C', '槽': 'C', '曹': 'C', '草': 'C', '厕': 'C', '策': 'C', '侧': 'C', '册': 'C', '测': 'C', '层': 'C', '蹭': 'C', '插': 'C', '叉': 'C', '茬': 'C', '茶': 'C', '查': 'C', '碴': 'C', '搽': 'C', '察': 'C', '岔': 'C', '差': 'C', '诧': 'C', '拆': 'C', '柴': 'C', '豺': 'C', '搀': 'C', '掺': 'C', '蝉': 'C', '馋': 'C', '缠': 'C', '铲': 'C', '产': 'C', '阐': 'C', '颤': 'C', '昌': 'C', '猖': 'C', '场': 'C', '尝': 'C', '常': 'C', '长': 'C', '偿': 'C', '肠': 'C', '厂': 'C', '敞': 'C', '畅': 'C', '唱': 'C', '倡': 'C',
                // D
                '答': 'D', '达': 'D', '搭': 'D', '打': 'D', '大': 'D', '呆': 'D', '歹': 'D', '傣': 'D', '戴': 'D', '带': 'D', '殆': 'D', '代': 'D', '贷': 'D', '袋': 'D', '待': 'D', '逮': 'D', '怠': 'D', '耽': 'D', '担': 'D', '丹': 'D', '单': 'D', '郸': 'D', '掸': 'D', '胆': 'D', '旦': 'D', '氮': 'D', '但': 'D', '惮': 'D', '淡': 'D', '诞': 'D', '弹': 'D', '蛋': 'D', '当': 'D', '挡': 'D', '党': 'D', '荡': 'D', '档': 'D', '刀': 'D', '捣': 'D', '蹈': 'D', '倒': 'D', '岛': 'D', '祷': 'D', '导': 'D', '到': 'D', '稻': 'D', '悼': 'D', '道': 'D', '盗': 'D', '德': 'D', '得': 'D', '的': 'D', '蹬': 'D', '灯': 'D', '登': 'D', '等': 'D', '瞪': 'D', '凳': 'D', '邓': 'D', '堤': 'D', '低': 'D', '滴': 'D', '迪': 'D', '敌': 'D', '笛': 'D', '狄': 'D', '涤': 'D', '翟': 'D', '嫡': 'D', '抵': 'D', '底': 'D', '地': 'D', '蒂': 'D', '第': 'D', '帝': 'D', '弟': 'D', '递': 'D', '缔': 'D',
                // E
                '恩': 'E',
                // F
                '发': 'F', '乏': 'F', '伐': 'F', '罚': 'F', '阀': 'F', '法': 'F', '藩': 'F', '帆': 'F', '番': 'F', '翻': 'F', '凡': 'F', '烦': 'F', '反': 'F', '返': 'F', '范': 'F', '贩': 'F', '犯': 'F', '饭': 'F', '泛': 'F', '坊': 'F', '芳': 'F', '方': 'F', '肪': 'F', '房': 'F', '防': 'F', '妨': 'F', '仿': 'F', '访': 'F', '纺': 'F', '放': 'F', '菲': 'F', '非': 'F', '啡': 'F', '飞': 'F', '肥': 'F', '匪': 'F', '诽': 'F', '菲': 'F', '吠': 'F', '肺': 'F', '废': 'F', '沸': 'F', '费': 'F', '芬': 'F', '酚': 'F', '吩': 'F', '氛': 'F', '分': 'F', '纷': 'F', '坟': 'F', '焚': 'F', '汾': 'F', '粉': 'F', '奋': 'F', '份': 'F', '忿': 'F', '愤': 'F', '粪': 'F', '丰': 'F', '封': 'F', '枫': 'F', '蜂': 'F', '峰': 'F', '锋': 'F', '风': 'F', '疯': 'F', '烽': 'F', '逢': 'F', '冯': 'F', '缝': 'F', '讽': 'F', '奉': 'F', '凤': 'F',
                // G
                '咖': 'G', '噶': 'G', '嘎': 'G', '该': 'G', '改': 'G', '概': 'G', '钙': 'G', '盖': 'G', '溉': 'G', '干': 'G', '甘': 'G', '杆': 'G', '柑': 'G', '竿': 'G', '肝': 'G', '赶': 'G', '感': 'G', '秆': 'G', '敢': 'G', '赣': 'G', '冈': 'G', '刚': 'G', '钢': 'G', '缸': 'G', '肛': 'G', '纲': 'G', '岗': 'G', '港': 'G', '杠': 'G', '篙': 'G', '皋': 'G', '高': 'G', '膏': 'G', '羔': 'G', '糕': 'G', '搞': 'G', '镐': 'G', '稿': 'G', '告': 'G', '哥': 'G', '歌': 'G', '搁': 'G', '戈': 'G', '鸽': 'G', '胳': 'G', '疙': 'G', '割': 'G', '革': 'G', '葛': 'G', '阁': 'G', '格': 'G', '蛤': 'G', '隔': 'G', '铬': 'G', '个': 'G', '各': 'G', '给': 'G', '根': 'G', '跟': 'G', '耕': 'G', '更': 'G', '庚': 'G', '羹': 'G', '埂': 'G', '耿': 'G', '梗': 'G', '工': 'G', '攻': 'G', '功': 'G', '恭': 'G', '龚': 'G', '供': 'G', '躬': 'G', '公': 'G', '宫': 'G', '弓': 'G', '巩': 'G', '汞': 'G', '拱': 'G', '贡': 'G', '共': 'G', '钩': 'G', '勾': 'G', '沟': 'G', '苟': 'G', '狗': 'G', '垢': 'G', '构': 'G', '购': 'G', '够': 'G', '辜': 'G', '菇': 'G', '咕': 'G', '箍': 'G', '估': 'G', '沽': 'G', '孤': 'G', '姑': 'G', '鼓': 'G', '古': 'G', '蛊': 'G', '骨': 'G', '谷': 'G', '股': 'G', '故': 'G', '顾': 'G', '固': 'G', '雇': 'G', '刮': 'G', '瓜': 'G', '剐': 'G', '寡': 'G', '挂': 'G', '褂': 'G', '乖': 'G', '拐': 'G', '怪': 'G', '棺': 'G', '关': 'G', '官': 'G', '冠': 'G', '观': 'G', '管': 'G', '馆': 'G', '罐': 'G', '惯': 'G', '灌': 'G', '贯': 'G', '光': 'G', '广': 'G', '逛': 'G', '归': 'G', '龟': 'G', '规': 'G', '硅': 'G', '瑰': 'G', '闺': 'G', '轨': 'G', '鬼': 'G', '诡': 'G', '癸': 'G', '桂': 'G', '柜': 'G', '跪': 'G', '贵': 'G', '刽': 'G', '辊': 'G', '滚': 'G', '棍': 'G', '锅': 'G', '郭': 'G', '国': 'G', '果': 'G', '裹': 'G', '过': 'G',
                // H
                '哈': 'H', '骸': 'H', '孩': 'H', '海': 'H', '氦': 'H', '亥': 'H', '害': 'H', '骇': 'H', '酣': 'H', '憨': 'H', '邯': 'H', '韩': 'H', '含': 'H', '涵': 'H', '寒': 'H', '函': 'H', '喊': 'H', '罕': 'H', '翰': 'H', '撼': 'H', '捍': 'H', '旱': 'H', '憾': 'H', '悍': 'H', '焊': 'H', '汗': 'H', '汉': 'H', '夯': 'H', '杭': 'H', '航': 'H', '壕': 'H', '嚎': 'H', '豪': 'H', '毫': 'H', '郝': 'H', '好': 'H', '耗': 'H', '号': 'H', '浩': 'H', '呵': 'H', '喝': 'H', '荷': 'H', '菏': 'H', '核': 'H', '禾': 'H', '和': 'H', '何': 'H', '合': 'H', '盒': 'H', '貉': 'H', '阂': 'H', '河': 'H', '涸': 'H', '赫': 'H', '褐': 'H', '鹤': 'H', '贺': 'H', '嘿': 'H', '黑': 'H', '痕': 'H', '很': 'H', '狠': 'H', '恨': 'H', '哼': 'H', '亨': 'H', '横': 'H', '衡': 'H', '恒': 'H', '轰': 'H', '哄': 'H', '烘': 'H', '虹': 'H', '鸿': 'H', '洪': 'H', '宏': 'H', '弘': 'H', '红': 'H', '喉': 'H', '侯': 'H', '猴': 'H', '吼': 'H', '厚': 'H', '候': 'H', '后': 'H', '呼': 'H', '乎': 'H', '忽': 'H', '瑚': 'H', '壶': 'H', '葫': 'H', '胡': 'H', '蝴': 'H', '狐': 'H', '糊': 'H', '湖': 'H', '弧': 'H', '虎': 'H', '唬': 'H', '护': 'H', '互': 'H', '沪': 'H', '户': 'H',
                // J
                '花': 'J', '华': 'J', '猾': 'J', '滑': 'J', '画': 'J', '划': 'J', '化': 'J', '话': 'J', '槐': 'J', '徊': 'J', '怀': 'J', '淮': 'J', '坏': 'J', '欢': 'J', '环': 'J', '桓': 'J', '还': 'J', '缓': 'J', '换': 'J', '患': 'J', '唤': 'J', '痪': 'J', '豢': 'J', '焕': 'J', '涣': 'J', '宦': 'J', '幻': 'J', '荒': 'J', '慌': 'J', '黄': 'J', '磺': 'J', '蝗': 'J', '簧': 'J', '皇': 'J', '凰': 'J', '惶': 'J', '煌': 'J', '晃': 'J', '幌': 'J', '恍': 'J', '谎': 'J', '灰': 'J', '挥': 'J', '辉': 'J', '徽': 'J', '恢': 'J', '蛔': 'J', '回': 'J', '毁': 'J', '悔': 'J', '慧': 'J', '卉': 'J', '惠': 'J', '晦': 'J', '贿': 'J', '秽': 'J', '会': 'J', '烩': 'J', '汇': 'J', '讳': 'J', '诲': 'J', '绘': 'J', '昏': 'J', '婚': 'J', '魂': 'J', '浑': 'J', '混': 'J', '豁': 'J', '活': 'J', '伙': 'J', '火': 'J', '获': 'J', '或': 'J', '惑': 'J', '霍': 'J', '货': 'J', '祸': 'J',
                // K
                '击': 'J', '圾': 'J', '基': 'J', '机': 'J', '畸': 'J', '稽': 'J', '积': 'J', '箕': 'J', '肌': 'J', '饥': 'J', '迹': 'J', '激': 'J', '讥': 'J', '鸡': 'J', '姬': 'J', '绩': 'J', '缉': 'J', '吉': 'J', '极': 'J', '棘': 'J', '辑': 'J', '籍': 'J', '集': 'J', '及': 'J', '急': 'J', '疾': 'J', '汲': 'J', '即': 'J', '嫉': 'J', '级': 'J', '挤': 'J', '几': 'J', '脊': 'J', '己': 'J', '蓟': 'J', '技': 'J', '冀': 'J', '季': 'J', '伎': 'J', '祭': 'J', '剂': 'J', '悸': 'J', '济': 'J', '寄': 'J', '寂': 'J', '计': 'J', '记': 'J', '既': 'J', '忌': 'J', '际': 'J', '妓': 'J', '继': 'J', '纪': 'J', '嘉': 'J', '枷': 'J', '夹': 'J', '佳': 'J', '家': 'J', '加': 'J', '荚': 'J', '颊': 'J', '贾': 'J', '甲': 'J', '钾': 'J', '假': 'J', '稼': 'J', '价': 'J', '架': 'J', '驾': 'J', '嫁': 'J', '歼': 'J', '监': 'J', '坚': 'J', '尖': 'J', '笺': 'J', '间': 'J', '煎': 'J', '兼': 'J', '肩': 'J', '艰': 'J', '奸': 'J', '缄': 'J', '茧': 'J', '检': 'J', '柬': 'J', '碱': 'J', '硷': 'J', '拣': 'J', '捡': 'J', '简': 'J', '俭': 'J', '剪': 'J', '减': 'J', '荐': 'J', '槛': 'J', '鉴': 'J', '践': 'J', '贱': 'J', '见': 'J', '键': 'J', '箭': 'J', '件': 'J', '健': 'J', '舰': 'J', '剑': 'J', '饯': 'J', '渐': 'J', '溅': 'J', '涧': 'J', '建': 'J', '僵': 'J', '姜': 'J', '将': 'J', '浆': 'J', '江': 'J', '疆': 'J', '蒋': 'J', '桨': 'J', '奖': 'J', '讲': 'J', '匠': 'J', '酱': 'J', '降': 'J', '蕉': 'J', '椒': 'J', '礁': 'J', '焦': 'J', '胶': 'J', '交': 'J', '郊': 'J', '浇': 'J', '骄': 'J', '娇': 'J', '嚼': 'J', '搅': 'J', '铰': 'J', '矫': 'J', '侥': 'J', '脚': 'J', '狡': 'J', '角': 'J', '饺': 'J', '缴': 'J', '绞': 'J', '剿': 'J', '教': 'J', '酵': 'J', '轿': 'J', '较': 'J', '叫': 'J', '窖': 'J', '揭': 'J', '接': 'J', '皆': 'J', '秸': 'J', '街': 'J', '阶': 'J', '截': 'J', '劫': 'J', '节': 'J', '桔': 'J', '杰': 'J', '捷': 'J', '睫': 'J', '竭': 'J', '洁': 'J', '结': 'J', '解': 'J', '姐': 'J', '戒': 'J', '藉': 'J', '芥': 'J', '界': 'J', '借': 'J', '介': 'J', '疥': 'J', '诫': 'J', '届': 'J', '巾': 'J', '筋': 'J', '斤': 'J', '金': 'J', '今': 'J', '津': 'J', '襟': 'J', '紧': 'J', '锦': 'J', '仅': 'J', '谨': 'J', '进': 'J', '靳': 'J', '晋': 'J', '禁': 'J', '近': 'J', '烬': 'J', '浸': 'J', '尽': 'J', '劲': 'J', '荆': 'J', '兢': 'J', '茎': 'J', '睛': 'J', '晶': 'J', '鲸': 'J', '京': 'J', '惊': 'J', '精': 'J', '粳': 'J', '经': 'J', '井': 'J', '警': 'J', '景': 'J', '颈': 'J', '静': 'J', '境': 'J', '敬': 'J', '镜': 'J', '径': 'J', '痉': 'J', '靖': 'J', '竟': 'J', '竞': 'J', '净': 'J', '炯': 'J', '窘': 'J', '揪': 'J', '究': 'J', '纠': 'J', '玖': 'J', '久': 'J', '灸': 'J', '九': 'J', '酒': 'J', '厩': 'J', '救': 'J', '就': 'J', '舅': 'J', '旧': 'J', '臼': 'J', '舅': 'J', '咎': 'J', '疚': 'J', '鞠': 'J', '拘': 'J', '狙': 'J', '疽': 'J', '居': 'J', '驹': 'J', '菊': 'J', '局': 'J', '咀': 'J', '矩': 'J', '举': 'J', '沮': 'J', '聚': 'J', '拒': 'J', '据': 'J', '巨': 'J', '具': 'J', '距': 'J', '踞': 'J', '锯': 'J', '俱': 'J', '句': 'J', '惧': 'J', '炬': 'J', '剧': 'J', '捐': 'J', '鹃': 'J', '娟': 'J', '倦': 'J', '眷': 'J', '卷': 'J', '绢': 'J', '撅': 'J', '攫': 'J', '抉': 'J', '掘': 'J', '倔': 'J', '爵': 'J', '觉': 'J', '决': 'J', '诀': 'J', '绝': 'J', '均': 'J', '菌': 'J', '钧': 'J', '军': 'J', '君': 'J', '峻': 'J', '俊': 'J', '竣': 'J', '浚': 'J', '郡': 'J', '骏': 'J',
                // K
                '咖': 'K', '喀': 'K', '卡': 'K', '咯': 'K', '开': 'K', '揩': 'K', '凯': 'K', '慨': 'K', '刊': 'K', '堪': 'K', '勘': 'K', '坎': 'K', '砍': 'K', '看': 'K', '康': 'K', '慷': 'K', '糠': 'K', '扛': 'K', '抗': 'K', '亢': 'K', '炕': 'K', '考': 'K', '拷': 'K', '烤': 'K', '靠': 'K', '坷': 'K', '苛': 'K', '柯': 'K', '棵': 'K', '磕': 'K', '颗': 'K', '科': 'K', '壳': 'K', '咳': 'K', '可': 'K', '渴': 'K', '克': 'K', '刻': 'K', '客': 'K', '课': 'K', '肯': 'K', '啃': 'K', '垦': 'K', '恳': 'K', '坑': 'K', '吭': 'K', '空': 'K', '恐': 'K', '孔': 'K', '控': 'K', '抠': 'K', '口': 'K', '扣': 'K', '寇': 'K', '枯': 'K', '哭': 'K', '窟': 'K', '苦': 'K', '酷': 'K', '库': 'K', '裤': 'K', '夸': 'K', '垮': 'K', '挎': 'K', '跨': 'K', '胯': 'K', '块': 'K', '筷': 'K', '侩': 'K', '快': 'K', '宽': 'K', '款': 'K', '匡': 'K', '筐': 'K', '狂': 'K', '框': 'K', '矿': 'K', '眶': 'K', '旷': 'K', '况': 'K', '亏': 'K', '盔': 'K', '岿': 'K', '窥': 'K', '葵': 'K', '奎': 'K', '魁': 'K', '傀': 'K', '馈': 'K', '愧': 'K', '溃': 'K', '坤': 'K', '昆': 'K', '捆': 'K', '困': 'K', '括': 'K', '扩': 'K', '廓': 'K', '兀': 'K', '阔': 'K',
                // L
                '啦': 'L', '喇': 'L', '蜡': 'L', '腊': 'L', '辣': 'L', '啦': 'L', '莱': 'L', '来': 'L', '赖': 'L', '蓝': 'L', '婪': 'L', '栏': 'L', '拦': 'L', '篮': 'L', '阑': 'L', '澜': 'L', '谰': 'L', '揽': 'L', '览': 'L', '懒': 'L', '缆': 'L', '烂': 'L', '滥': 'L', '琅': 'L', '榔': 'L', '狼': 'L', '廊': 'L', '郎': 'L', '朗': 'L', '浪': 'L', '捞': 'L', '劳': 'L', '牢': 'L', '老': 'L', '佬': 'L', '姥': 'L', '酪': 'L', '烙': 'L', '涝': 'L', '勒': 'L', '乐': 'L', '雷': 'L', '镭': 'L', '蕾': 'L', '磊': 'L', '累': 'L', '儡': 'L', '垒': 'L', '擂': 'L', '肋': 'L', '类': 'L', '泪': 'L', '棱': 'L', '楞': 'L', '冷': 'L', '厘': 'L', '梨': 'L', '犁': 'L', '黎': 'L', '篱': 'L', '狸': 'L', '离': 'L', '漓': 'L', '理': 'L', '李': 'L', '里': 'L', '鲤': 'L', '礼': 'L', '莉': 'L', '荔': 'L', '吏': 'L', '栗': 'L', '丽': 'L', '厉': 'L', '励': 'L', '砾': 'L', '历': 'L', '利': 'L', '傈': 'L', '例': 'L', '俐': 'L', '痢': 'L', '立': 'L', '粒': 'L', '沥': 'L', '隶': 'L', '力': 'L', '璃': 'L', '哩': 'L', '俩': 'L', '联': 'L', '莲': 'L', '连': 'L', '镰': 'L', '廉': 'L', '怜': 'L', '涟': 'L', '帘': 'L', '敛': 'L', '脸': 'L', '链': 'L', '恋': 'L', '炼': 'L', '练': 'L', '粮': 'L', '凉': 'L', '梁': 'L', '粱': 'L', '良': 'L', '两': 'L', '辆': 'L', '量': 'L', '晾': 'L', '亮': 'L', '谅': 'L', '撩': 'L', '聊': 'L', '僚': 'L', '疗': 'L', '燎': 'L', '寥': 'L', '辽': 'L', '潦': 'L', '了': 'L', '撂': 'L', '镣': 'L', '廖': 'L', '料': 'L', '列': 'L', '裂': 'L', '烈': 'L', '劣': 'L', '猎': 'L', '琳': 'L', '林': 'L', '磷': 'L', '霖': 'L', '临': 'L', '邻': 'L', '鳞': 'L', '淋': 'L', '凛': 'L', '赁': 'L', '吝': 'L', '拎': 'L', '玲': 'L', '菱': 'L', '零': 'L', '龄': 'L', '铃': 'L', '伶': 'L', '羚': 'L', '凌': 'L', '灵': 'L', '陵': 'L', '岭': 'L', '领': 'L', '另': 'L', '令': 'L', '溜': 'L', '琉': 'L', '榴': 'L', '琉': 'L', '硫': 'L', '馏': 'L', '留': 'L', '刘': 'L', '瘤': 'L', '流': 'L', '柳': 'L', '六': 'L', '龙': 'L', '聋': 'L', '咙': 'L', '笼': 'L', '窿': 'L', '隆': 'L', '垄': 'L', '拢': 'L', '陇': 'L', '楼': 'L', '娄': 'L', '搂': 'L', '篓': 'L', '漏': 'L', '陋': 'L', '芦': 'L', '卢': 'L', '颅': 'L', '庐': 'L', '炉': 'L', '掳': 'L', '卤': 'L', '虏': 'L', '鲁': 'L', '麓': 'L', '碌': 'L', '露': 'L', '路': 'L', '赂': 'L', '鹿': 'L', '潞': 'L', '禄': 'L', '录': 'L', '陆': 'L', '戮': 'L', '驴': 'L', '吕': 'L', '铝': 'L', '侣': 'L', '旅': 'L', '履': 'L', '屡': 'L', '缕': 'L', '虑': 'L', '氯': 'L', '律': 'L', '率': 'L', '滤': 'L', '绿': 'L',
                // M
                '妈': 'M', '麻': 'M', '玛': 'M', '码': 'M', '蚂': 'M', '马': 'M', '骂': 'M', '嘛': 'M', '吗': 'M', '埋': 'M', '买': 'M', '麦': 'M', '卖': 'M', '迈': 'M', '脉': 'M', '瞒': 'M', '馒': 'M', '蛮': 'M', '满': 'M', '蔓': 'M', '曼': 'M', '慢': 'M', '漫': 'M', '谩': 'M', '芒': 'M', '茫': 'M', '盲': 'M', '氓': 'M', '忙': 'M', '莽': 'M', '猫': 'M', '茅': 'M', '锚': 'M', '毛': 'M', '矛': 'M', '铆': 'M', '卯': 'M', '茂': 'M', '冒': 'M', '帽': 'M', '貌': 'M', '贸': 'M', '么': 'M', '玫': 'M', '枚': 'M', '梅': 'M', '酶': 'M', '霉': 'M', '煤': 'M', '没': 'M', '眉': 'M', '媒': 'M', '镁': 'M', '每': 'M', '美': 'M', '昧': 'M', '寐': 'M', '妹': 'M', '媚': 'M', '门': 'M', '闷': 'M', '们': 'M', '萌': 'M', '蒙': 'M', '檬': 'M', '盟': 'M', '锰': 'M', '猛': 'M', '梦': 'M', '孟': 'M', '眯': 'M', '醚': 'M', '靡': 'M', '糜': 'M', '迷': 'M', '谜': 'M', '弥': 'M', '米': 'M', '秘': 'M', '觅': 'M', '泌': 'M', '蜜': 'M', '密': 'M', '幂': 'M', '棉': 'M', '眠': 'M', '绵': 'M', '冕': 'M', '免': 'M', '勉': 'M', '娩': 'M', '缅': 'M', '面': 'M', '苗': 'M', '描': 'M', '瞄': 'M', '藐': 'M', '秒': 'M', '渺': 'M', '庙': 'M', '妙': 'M', '蔑': 'M', '灭': 'M', '民': 'M', '抿': 'M', '皿': 'M', '敏': 'M', '悯': 'M', '闽': 'M', '明': 'M', '螟': 'M', '鸣': 'M', '铭': 'M', '名': 'M', '命': 'M', '谬': 'M', '摸': 'M', '摹': 'M', '蘑': 'M', '模': 'M', '膜': 'M', '磨': 'M', '摩': 'M', '魔': 'M', '抹': 'M', '末': 'M', '莫': 'M', '墨': 'M', '默': 'M', '沫': 'M', '漠': 'M', '寞': 'M', '陌': 'M', '谋': 'M', '牟': 'M', '某': 'M', '拇': 'M', '牡': 'M', '亩': 'M', '姆': 'M', '母': 'M', '墓': 'M', '暮': 'M', '幕': 'M', '募': 'M', '慕': 'M', '木': 'M', '目': 'M', '睦': 'M', '牧': 'M', '穆': 'M', '拿': 'N', '哪': 'N', '呐': 'N', '钠': 'N', '那': 'N', '娜': 'N', '纳': 'N', '氖': 'N', '乃': 'N', '奶': 'N', '耐': 'N', '奈': 'N', '南': 'N', '男': 'N', '难': 'N', '囊': 'N', '挠': 'N', '脑': 'N', '恼': 'N', '闹': 'N', '淖': 'N', '呢': 'N', '馁': 'N', '内': 'N', '嫩': 'N', '能': 'N', '妮': 'N', '霓': 'N', '倪': 'N', '泥': 'N', '尼': 'N', '拟': 'N', '你': 'N', '匿': 'N', '腻': 'N', '逆': 'N', '溺': 'N', '蔫': 'N', '拈': 'N', '年': 'N', '碾': 'N', '恋': 'N', '娘': 'N', '酿': 'N', '鸟': 'N', '尿': 'N', '捏': 'N', '聂': 'N', '孽': 'N', '啮': 'N', '镊': 'N', '镍': 'N', '涅': 'N', '您': 'N', '柠': 'N', '狞': 'N', '凝': 'N', '宁': 'N', '拧': 'N', '泞': 'N', '牛': 'N', '扭': 'N', '纽': 'N', '农': 'N', '浓': 'N', '脓': 'N', '弄': 'N', '奴': 'N', '努': 'N', '怒': 'N', '女': 'N', '暖': 'N', '虐': 'N', '疟': 'N',
                // O
                '哦': 'O',
                // P
                '扒': 'P', '啪': 'P', '葩': 'P', '爬': 'P', '帕': 'P', '怕': 'P', '琶': 'P', '拍': 'P', '排': 'P', '牌': 'P', '徘': 'P', '湃': 'P', '派': 'P', '攀': 'P', '盘': 'P', '磐': 'P', '盼': 'P', '畔': 'P', '判': 'P', '叛': 'P', '乓': 'P', '庞': 'P', '旁': 'P', '耪': 'P', '胖': 'P', '抛': 'P', '咆': 'P', '刨': 'P', '炮': 'P', '袍': 'P', '跑': 'P', '泡': 'P', '呸': 'P', '胚': 'P', '培': 'P', '裴': 'P', '赔': 'P', '陪': 'P', '配': 'P', '佩': 'P', '沛': 'P', '喷': 'P', '盆': 'P', '砰': 'P', '抨': 'P', '烹': 'P', '澎': 'P', '彭': 'P', '朋': 'P', '捧': 'P', '碰': 'P', '坯': 'P', '砒': 'P', '霹': 'P', '批': 'P', '披': 'P', '劈': 'P', '琵': 'P', '毗': 'P', '啤': 'P', '脾': 'P', '疲': 'P', '皮': 'P', '匹': 'P', '痞': 'P', '僻': 'P', '屁': 'P', '譬': 'P', '篇': 'P', '偏': 'P', '片': 'P', '骗': 'P', '飘': 'P', '漂': 'P', '瓢': 'P', '票': 'P', '撇': 'P', '瞥': 'P', '拼': 'P', '频': 'P', '贫': 'P', '品': 'P', '聘': 'P', '乒': 'P', '坪': 'P', '苹': 'P', '萍': 'P', '平': 'P', '凭': 'P', '瓶': 'P', '评': 'P', '屏': 'P', '坡': 'P', '泼': 'P', '颇': 'P', '婆': 'P', '破': 'P', '魄': 'P', '迫': 'P', '粕': 'P', '剖': 'P', '扑': 'P', '铺': 'P', '仆': 'P', '莆': 'P', '葡': 'P', '朴': 'P', '圃': 'P', '普': 'P', '浦': 'P', '谱': 'P', '曝': 'P', '瀑': 'P',
                // Q
                '七': 'Q', '沏': 'Q', '妻': 'Q', '柒': 'Q', '凄': 'Q', '栖': 'Q', '戚': 'Q', '期': 'Q', '欺': 'Q', '犀': 'Q', '熄': 'Q', '熙': 'Q', '析': 'Q', '嘻': 'Q', '汐': 'Q', '悉': 'Q', '惜': 'Q', '烯': 'Q', '溪': 'Q', '汐': 'Q', '犀': 'Q', '檄': 'Q', '袭': 'Q', '席': 'Q', '习': 'Q', '媳': 'Q', '喜': 'Q', '铣': 'Q', '洗': 'Q', '系': 'Q', '隙': 'Q', '戏': 'Q', '细': 'Q', '瞎': 'X', '虾': 'X', '匣': 'X', '霞': 'X', '辖': 'X', '暇': 'X', '峡': 'X', '侠': 'X', '狭': 'X', '下': 'X', '厦': 'X', '夏': 'X', '吓': 'X', '掀': 'X', '锨': 'X', '先': 'X', '仙': 'X', '鲜': 'X', '纤': 'X', '咸': 'X', '贤': 'X', '衔': 'X', '舷': 'X', '闲': 'X', '涎': 'X', '弦': 'X', '嫌': 'X', '显': 'X', '险': 'X', '现': 'X', '献': 'X', '县': 'X', '腺': 'X', '馅': 'X', '羡': 'X', '宪': 'X', '陷': 'X', '限': 'X', '线': 'X', '相': 'X', '厢': 'X', '镶': 'X', '香': 'X', '箱': 'X', '襄': 'X', '湘': 'X', '乡': 'X', '翔': 'X', '祥': 'X', '详': 'X', '想': 'X', '响': 'X', '享': 'X', '项': 'X', '巷': 'X', '橡': 'X', '像': 'X', '向': 'X', '象': 'X', '萧': 'X', '硝': 'X', '霄': 'X', '削': 'X', '哮': 'X', '嚣': 'X', '销': 'X', '消': 'X', '宵': 'X', '淆': 'X', '晓': 'X', '小': 'X', '孝': 'X', '校': 'X', '肖': 'X', '啸': 'X', '笑': 'X', '效': 'X', '楔': 'X', '些': 'X', '歇': 'X', '蝎': 'X', '协': 'X', '挟': 'X', '携': 'X', '邪': 'X', '斜': 'X', '胁': 'X', '谐': 'X', '写': 'X', '械': 'X', '卸': 'X', '蟹': 'X', '懈': 'X', '泄': 'X', '泻': 'X', '谢': 'X', '屑': 'X', '薪': 'X', '芯': 'X', '锌': 'X', '欣': 'X', '辛': 'X', '新': 'X', '忻': 'X', '心': 'X', '信': 'X', '衅': 'X', '星': 'X', '腥': 'X', '猩': 'X', '惺': 'X', '兴': 'X', '刑': 'X', '型': 'X', '形': 'X', '邢': 'X', '行': 'X', '醒': 'X', '幸': 'X', '杏': 'X', '性': 'X', '姓': 'X', '兄': 'X', '凶': 'X', '胸': 'X', '匈': 'X', '汹': 'X', '雄': 'X', '熊': 'X', '休': 'X', '修': 'X', '羞': 'X', '朽': 'X', '嗅': 'X', '锈': 'X', '秀': 'X', '袖': 'X', '绣': 'X', '墟': 'X', '戌': 'X', '需': 'X', '虚': 'X', '嘘': 'X', '须': 'X', '徐': 'X', '许': 'X', '蓄': 'X', '酗': 'X', '叙': 'X', '旭': 'X', '序': 'X', '畜': 'X', '恤': 'X', '絮': 'X', '婿': 'X', '绪': 'X', '续': 'X', '轩': 'X', '喧': 'X', '宣': 'X', '悬': 'X', '旋': 'X', '玄': 'X', '选': 'X', '癣': 'X', '眩': 'X', '绚': 'X', '靴': 'X', '薛': 'X', '学': 'X', '穴': 'X', '雪': 'X', '血': 'X', '勋': 'X', '熏': 'X', '循': 'X', '旬': 'X', '询': 'X', '寻': 'X', '驯': 'X', '巡': 'X', '殉': 'X', '汛': 'X', '训': 'X', '讯': 'X', '逊': 'X', '迅': 'X',
                // Y
                '压': 'Y', '押': 'Y', '鸦': 'Y', '鸭': 'Y', '呀': 'Y', '丫': 'Y', '芽': 'Y', '牙': 'Y', '蚜': 'Y', '崖': 'Y', '衙': 'Y', '涯': 'Y', '雅': 'Y', '哑': 'Y', '亚': 'Y', '讶': 'Y', '焉': 'Y', '咽': 'Y', '阉': 'Y', '烟': 'Y', '淹': 'Y', '盐': 'Y', '严': 'Y', '研': 'Y', '蜒': 'Y', '岩': 'Y', '延': 'Y', '言': 'Y', '颜': 'Y', '阎': 'Y', '炎': 'Y', '沿': 'Y', '奄': 'Y', '掩': 'Y', '眼': 'Y', '衍': 'Y', '演': 'Y', '艳': 'Y', '堰': 'Y', '燕': 'Y', '厌': 'Y', '砚': 'Y', '雁': 'Y', '唁': 'Y', '彦': 'Y', '焰': 'Y', '宴': 'Y', '谚': 'Y', '验': 'Y', '殃': 'Y', '央': 'Y', '鸯': 'Y', '秧': 'Y', '杨': 'Y', '扬': 'Y', '佯': 'Y', '疡': 'Y', '羊': 'Y', '洋': 'Y', '阳': 'Y', '氧': 'Y', '仰': 'Y', '痒': 'Y', '养': 'Y', '样': 'Y', '漾': 'Y', '邀': 'Y', '腰': 'Y', '妖': 'Y', '瑶': 'Y', '摇': 'Y', '尧': 'Y', '遥': 'Y', '窑': 'Y', '谣': 'Y', '姚': 'Y', '咬': 'Y', '舀': 'Y', '药': 'Y', '要': 'Y', '耀': 'Y', '椰': 'Y', '噎': 'Y', '耶': 'Y', '爷': 'Y', '野': 'Y', '冶': 'Y', '也': 'Y', '页': 'Y', '掖': 'Y', '业': 'Y', '叶': 'Y', '曳': 'Y', '腋': 'Y', '夜': 'Y', '液': 'Y', '一': 'Y', '壹': 'Y', '医': 'Y', '揖': 'Y', '铱': 'Y', '依': 'Y', '伊': 'Y', '衣': 'Y', '颐': 'Y', '夷': 'Y', '遗': 'Y', '移': 'Y', '仪': 'Y', '胰': 'Y', '疑': 'Y', '沂': 'Y', '宜': 'Y', '姨': 'Y', '彝': 'Y', '椅': 'Y', '蚁': 'Y', '倚': 'Y', '已': 'Y', '乙': 'Y', '矣': 'Y', '以': 'Y', '艺': 'Y', '抑': 'Y', '易': 'Y', '邑': 'Y', '屹': 'Y', '亿': 'Y', '役': 'Y', '臆': 'Y', '逸': 'Y', '肄': 'Y', '疫': 'Y', '亦': 'Y', '裔': 'Y', '意': 'Y', '毅': 'Y', '忆': 'Y', '义': 'Y', '益': 'Y', '溢': 'Y', '诣': 'Y', '议': 'Y', '谊': 'Y', '译': 'Y', '异': 'Y', '翼': 'Y', '翌': 'Y', '绎': 'Y', '茵': 'Y', '荫': 'Y', '因': 'Y', '殷': 'Y', '音': 'Y', '阴': 'Y', '姻': 'Y', '吟': 'Y', '银': 'Y', '淫': 'Y', '寅': 'Y', '饮': 'Y', '尹': 'Y', '引': 'Y', '隐': 'Y', '印': 'Y', '英': 'Y', '樱': 'Y', '婴': 'Y', '鹰': 'Y', '应': 'Y', '缨': 'Y', '莹': 'Y', '萤': 'Y', '营': 'Y', '荧': 'Y', '蝇': 'Y', '迎': 'Y', '赢': 'Y', '盈': 'Y', '影': 'Y', '颖': 'Y', '硬': 'Y', '映': 'Y', '哟': 'Y', '拥': 'Y', '佣': 'Y', '臃': 'Y', '痈': 'Y', '庸': 'Y', '雍': 'Y', '踊': 'Y', '蛹': 'Y', '咏': 'Y', '泳': 'Y', '涌': 'Y', '永': 'Y', '恿': 'Y', '勇': 'Y', '用': 'Y', '幽': 'Y', '优': 'Y', '悠': 'Y', '忧': 'Y', '尤': 'Y', '由': 'Y', '邮': 'Y', '铀': 'Y', '犹': 'Y', '油': 'Y', '游': 'Y', '酉': 'Y', '有': 'Y', '友': 'Y', '右': 'Y', '佑': 'Y', '釉': 'Y', '诱': 'Y', '又': 'Y', '幼': 'Y', '迂': 'Y', '淤': 'Y', '于': 'Y', '盂': 'Y', '榆': 'Y', '虞': 'Y', '愚': 'Y', '舆': 'Y', '余': 'Y', '俞': 'Y', '逾': 'Y', '鱼': 'Y', '愉': 'Y', '渝': 'Y', '渔': 'Y', '隅': 'Y', '予': 'Y', '娱': 'Y', '雨': 'Y', '与': 'Y', '屿': 'Y', '禹': 'Y', '宇': 'Y', '语': 'Y', '羽': 'Y', '玉': 'Y', '域': 'Y', '芋': 'Y', '郁': 'Y', '吁': 'Y', '遇': 'Y', '喻': 'Y', '峪': 'Y', '御': 'Y', '愈': 'Y', '欲': 'Y', '狱': 'Y', '育': 'Y', '誉': 'Y', '浴': 'Y', '寓': 'Y', '裕': 'Y', '预': 'Y', '豫': 'Y', '驭': 'Y', '鸳': 'Y', '渊': 'Y', '冤': 'Y', '元': 'Y', '垣': 'Y', '袁': 'Y', '原': 'Y', '援': 'Y', '缘': 'Y', '源': 'Y', '猿': 'Y', '辕': 'Y', '园': 'Y', '员': 'Y', '圆': 'Y', '禹': 'Y', '远': 'Y', '苑': 'Y', '愿': 'Y', '怨': 'Y', '院': 'Y', '曰': 'Y', '约': 'Y', '越': 'Y', '跃': 'Y', '钥': 'Y', '岳': 'Y', '粤': 'Y', '月': 'Y', '悦': 'Y', '阅': 'Y', '耘': 'Y', '云': 'Y', '郧': 'Y', '匀': 'Y', '陨': 'Y', '允': 'Y', '运': 'Y', '蕴': 'Y', '酝': 'Y', '晕': 'Y', '韵': 'Y', '孕': 'Y',
                // Z
                '杂': 'Z', '栽': 'Z', '哉': 'Z', '灾': 'Z', '宰': 'Z', '载': 'Z', '再': 'Z', '在': 'Z', '咱': 'Z', '攒': 'Z', '暂': 'Z', '赞': 'Z', '赃': 'Z', '脏': 'Z', '葬': 'Z', '遭': 'Z', '糟': 'Z', '凿': 'Z', '藻': 'Z', '枣': 'Z', '早': 'Z', '澡': 'Z', '蚤': 'Z', '躁': 'Z', '噪': 'Z', '造': 'Z', '皂': 'Z', '灶': 'Z', '燥': 'Z', '责': 'Z', '择': 'Z', '则': 'Z', '泽': 'Z', '贼': 'Z', '怎': 'Z', '增': 'Z', '憎': 'Z', '曾': 'Z', '赠': 'Z', '扎': 'Z', '喳': 'Z', '渣': 'Z', '札': 'Z', '轧': 'Z', '铡': 'Z', '闸': 'Z', '眨': 'Z', '栅': 'Z', '榨': 'Z', '咋': 'Z', '乍': 'Z', '炸': 'Z', '诈': 'Z', '摘': 'Z', '窄': 'Z', '寨': 'Z', '瞻': 'Z', '毡': 'Z', '詹': 'Z', '粘': 'Z', '沾': 'Z', '盏': 'Z', '斩': 'Z', '辗': 'Z', '崭': 'Z', '展': 'Z', '蘸': 'Z', '栈': 'Z', '占': 'Z', '战': 'Z', '站': 'Z', '湛': 'Z', '绽': 'Z', '樟': 'Z', '章': 'Z', '彰': 'Z', '漳': 'Z', '张': 'Z', '掌': 'Z', '涨': 'Z', '杖': 'Z', '丈': 'Z', '帐': 'Z', '账': 'Z', '仗': 'Z', '胀': 'Z', '瘴': 'Z', '障': 'Z', '招': 'Z', '昭': 'Z', '找': 'Z', '沼': 'Z', '赵': 'Z', '照': 'Z', '罩': 'Z', '兆': 'Z', '肇': 'Z', '召': 'Z', '遮': 'Z', '折': 'Z', '哲': 'Z', '蛰': 'Z', '辙': 'Z', '者': 'Z', '锗': 'Z', '蔗': 'Z', '这': 'Z', '浙': 'Z', '珍': 'Z', '斟': 'Z', '真': 'Z', '甄': 'Z', '砧': 'Z', '臻': 'Z', '贞': 'Z', '针': 'Z', '侦': 'Z', '枕': 'Z', '疹': 'Z', '诊': 'Z', '震': 'Z', '振': 'Z', '镇': 'Z', '阵': 'Z', '蒸': 'Z', '挣': 'Z', '睁': 'Z', '征': 'Z', '狰': 'Z', '争': 'Z', '怔': 'Z', '整': 'Z', '拯': 'Z', '正': 'Z', '政': 'Z', '帧': 'Z', '症': 'Z', '郑': 'Z', '证': 'Z', '芝': 'Z', '枝': 'Z', '支': 'Z', '吱': 'Z', '蜘': 'Z', '知': 'Z', '肢': 'Z', '脂': 'Z', '汁': 'Z', '之': 'Z', '织': 'Z', '职': 'Z', '直': 'Z', '植': 'Z', '殖': 'Z', '执': 'Z', '值': 'Z', '侄': 'Z', '址': 'Z', '指': 'Z', '止': 'Z', '趾': 'Z', '只': 'Z', '旨': 'Z', '纸': 'Z', '志': 'Z', '挚': 'Z', '掷': 'Z', '至': 'Z', '致': 'Z', '置': 'Z', '帜': 'Z', '峙': 'Z', '制': 'Z', '智': 'Z', '秩': 'Z', '稚': 'Z', '质': 'Z', '炙': 'Z', '痔': 'Z', '滞': 'Z', '治': 'Z', '峙': 'Z', '适': 'Z', '市': 'S', '式': 'S', '事': 'S', '柿': 'S', '士': 'S', '氏': 'S', '世': 'S', '仕': 'S', '市': 'S', '示': 'S', '式': 'S', '势': 'S', '视': 'S', '试': 'S', '收': 'S', '手': 'S', '首': 'S', '守': 'S', '寿': 'S', '授': 'S', '售': 'S', '受': 'S', '瘦': 'S', '兽': 'S', '蔬': 'S', '枢': 'S', '梳': 'S', '殊': 'S', '抒': 'S', '输': 'S', '叔': 'S', '舒': 'S', '淑': 'S', '疏': 'S', '书': 'S', '赎': 'S', '孰': 'S', '熟': 'S', '薯': 'S', '暑': 'S', '曙': 'S', '署': 'S', '蜀': 'S', '黍': 'S', '鼠': 'S', '属': 'S', '术': 'S', '述': 'S', '树': 'S', '束': 'S', '戍': 'S', '竖': 'S', '墅': 'S', '庶': 'S', '数': 'S', '漱': 'S', '恕': 'S', '刷': 'S', '耍': 'S', '摔': 'S', '衰': 'S', '甩': 'S', '帅': 'S', '栓': 'S', '拴': 'S', '霜': 'S', '双': 'S', '爽': 'S', '谁': 'S', '水': 'S', '睡': 'S', '税': 'S', '吮': 'S', '瞬': 'S', '顺': 'S', '舜': 'S', '说': 'S', '硕': 'S', '朔': 'S', '烁': 'S', '斯': 'S', '撕': 'S', '嘶': 'S', '思': 'S', '私': 'S', '司': 'S', '丝': 'S', '死': 'S', '肆': 'S', '寺': 'S', '嗣': 'S', '四': 'S', '伺': 'S', '似': 'S', '饲': 'S', '巳': 'S', '松': 'S', '耸': 'S', '怂': 'S', '颂': 'S', '送': 'S', '宋': 'S', '讼': 'S', '诵': 'S', '搜': 'S', '艘': 'S', '擞': 'S', '嗽': 'S', '苏': 'S', '酥': 'S', '俗': 'S', '素': 'S', '速': 'S', '粟': 'S', '僳': 'S', '塑': 'S', '溯': 'S', '宿': 'S', '诉': 'S', '肃': 'S', '酸': 'S', '蒜': 'S', '算': 'S', '虽': 'S', '隋': 'S', '随': 'S', '绥': 'S', '髓': 'S', '碎': 'S', '岁': 'S', '穗': 'S', '遂': 'S', '隧': 'S', '祟': 'S', '孙': 'S', '损': 'S', '笋': 'S', '蓑': 'S', '梭': 'S', '唆': 'S', '缩': 'S', '琐': 'S', '索': 'S', '锁': 'S',
                // T
                '他': 'T', '它': 'T', '她': 'T', '塔': 'T', '獭': 'T', '蹋': 'T', '踏': 'T', '胎': 'T', '苔': 'T', '抬': 'T', '台': 'T', '泰': 'T', '酞': 'T', '太': 'T', '态': 'T', '汰': 'T', '坍': 'T', '摊': 'T', '贪': 'T', '瘫': 'T', '滩': 'T', '坛': 'T', '檀': 'T', '痰': 'T', '潭': 'T', '谭': 'T', '谈': 'T', '坦': 'T', '毯': 'T', '袒': 'T', '碳': 'T', '探': 'T', '叹': 'T', '炭': 'T', '汤': 'T', '塘': 'T', '搪': 'T', '堂': 'T', '棠': 'T', '膛': 'T', '唐': 'T', '糖': 'T', '倘': 'T', '躺': 'T', '淌': 'T', '趟': 'T', '烫': 'T', '掏': 'T', '涛': 'T', '滔': 'T', '绦': 'T', '萄': 'T', '桃': 'T', '逃': 'T', '淘': 'T', '陶': 'T', '讨': 'T', '套': 'T', '特': 'T', '藤': 'T', '腾': 'T', '疼': 'T', '誊': 'T', '梯': 'T', '剔': 'T', '踢': 'T', '锑': 'T', '提': 'T', '题': 'T', '蹄': 'T', '啼': 'T', '体': 'T', '替': 'T', '嚏': 'T', '惕': 'T', '涕': 'T', '剃': 'T', '屉': 'T', '天': 'T', '添': 'T', '填': 'T', '田': 'T', '甜': 'T', '恬': 'T', '舔': 'T', '腆': 'T', '挑': 'T', '条': 'T', '迢': 'T', '眺': 'T', '跳': 'T', '贴': 'T', '铁': 'T', '帖': 'T', '厅': 'T', '听': 'T', '烃': 'T', '汀': 'T', '廷': 'T', '停': 'T', '亭': 'T', '庭': 'T', '挺': 'T', '艇': 'T', '通': 'T', '桐': 'T', '酮': 'T', '瞳': 'T', '同': 'T', '铜': 'T', '彤': 'T', '童': 'T', '桶': 'T', '捅': 'T', '筒': 'T', '统': 'T', '痛': 'T', '偷': 'T', '投': 'T', '头': 'T', '透': 'T', '凸': 'T', '秃': 'T', '突': 'T', '图': 'T', '徒': 'T', '途': 'T', '涂': 'T', '屠': 'T', '土': 'T', '吐': 'T', '兔': 'T', '湍': 'T', '团': 'T', '推': 'T', '颓': 'T', '腿': 'T', '蜕': 'T', '褪': 'T', '退': 'T', '吞': 'T', '屯': 'T', '臀': 'T', '拖': 'T', '托': 'T', '脱': 'T', '鸵': 'T', '陀': 'T', '驮': 'T', '驼': 'T', '椭': 'T', '妥': 'T', '拓': 'T', '唾': 'T',
                // W
                '挖': 'W', '哇': 'W', '蛙': 'W', '洼': 'W', '娃': 'W', '瓦': 'W', '袜': 'W', '歪': 'W', '外': 'W', '豌': 'W', '弯': 'W', '湾': 'W', '玩': 'W', '顽': 'W', '丸': 'W', '烷': 'W', '完': 'W', '碗': 'W', '挽': 'W', '晚': 'W', '皖': 'W', '惋': 'W', '宛': 'W', '婉': 'W', '万': 'W', '腕': 'W', '汪': 'W', '王': 'W', '亡': 'W', '枉': 'W', '网': 'W', '往': 'W', '旺': 'W', '望': 'W', '忘': 'W', '妄': 'W', '威': 'W', '巍': 'W', '微': 'W', '危': 'W', '韦': 'W', '违': 'W', '桅': 'W', '围': 'W', '唯': 'W', '惟': 'W', '为': 'W', '潍': 'W', '维': 'W', '苇': 'W', '萎': 'W', '委': 'W', '伟': 'W', '伪': 'W', '尾': 'W', '纬': 'W', '未': 'W', '蔚': 'W', '味': 'W', '畏': 'W', '胃': 'W', '喂': 'W', '魏': 'W', '位': 'W', '渭': 'W', '谓': 'W', '尉': 'W', '慰': 'W', '卫': 'W', '瘟': 'W', '温': 'W', '蚊': 'W', '文': 'W', '闻': 'W', '纹': 'W', '吻': 'W', '稳': 'W', '紊': 'W', '问': 'W', '嗡': 'W', '翁': 'W', '瓮': 'W', '挝': 'W', '蜗': 'W', '涡': 'W', '窝': 'W', '我': 'W', '斡': 'W', '卧': 'W', '握': 'W', '沃': 'W', '巫': 'W', '呜': 'W', '钨': 'W', '乌': 'W', '污': 'W', '诬': 'W', '屋': 'W', '无': 'W', '芜': 'W', '梧': 'W', '吾': 'W', '吴': 'W', '毋': 'W', '武': 'W', '五': 'W', '捂': 'W', '午': 'W', '舞': 'W', '伍': 'W', '侮': 'W', '坞': 'W', '戊': 'W', '雾': 'W', '晤': 'W', '物': 'W', '勿': 'W', '务': 'W', '悟': 'W', '误': 'W',
                // X
                '夕': 'X', '汐': 'X', '西': 'X', '吸': 'X', '希': 'X', '悉': 'X', '析': 'X', '矽': 'X', '晰': 'X', '嘻': 'X', '汐': 'X',
                // Y
                '压': 'Y', '押': 'Y', '鸦': 'Y', '鸭': 'Y', '呀': 'Y', '丫': 'Y', '芽': 'Y', '牙': 'Y', '蚜': 'Y', '崖': 'Y', '衙': 'Y', '涯': 'Y', '雅': 'Y', '哑': 'Y', '亚': 'Y', '讶': 'Y', '焉': 'Y', '咽': 'Y', '阉': 'Y', '烟': 'Y', '淹': 'Y', '盐': 'Y', '严': 'Y', '研': 'Y', '蜒': 'Y', '岩': 'Y', '延': 'Y', '言': 'Y', '颜': 'Y', '阎': 'Y', '炎': 'Y', '沿': 'Y', '奄': 'Y', '掩': 'Y', '眼': 'Y', '衍': 'Y', '演': 'Y', '艳': 'Y', '堰': 'Y', '燕': 'Y', '厌': 'Y', '砚': 'Y', '雁': 'Y', '唁': 'Y', '彦': 'Y', '焰': 'Y', '宴': 'Y', '谚': 'Y', '验': 'Y', '殃': 'Y', '央': 'Y', '鸯': 'Y', '秧': 'Y', '杨': 'Y', '扬': 'Y', '佯': 'Y', '疡': 'Y', '羊': 'Y', '洋': 'Y', '阳': 'Y', '氧': 'Y', '仰': 'Y', '痒': 'Y', '养': 'Y', '样': 'Y', '漾': 'Y', '邀': 'Y', '腰': 'Y', '妖': 'Y', '瑶': 'Y', '摇': 'Y', '尧': 'Y', '遥': 'Y', '窑': 'Y', '谣': 'Y', '姚': 'Y', '咬': 'Y', '舀': 'Y', '药': 'Y', '要': 'Y', '耀': 'Y', '椰': 'Y', '噎': 'Y', '耶': 'Y', '爷': 'Y', '野': 'Y', '冶': 'Y', '也': 'Y', '页': 'Y', '掖': 'Y', '业': 'Y', '叶': 'Y', '曳': 'Y', '腋': 'Y', '夜': 'Y', '液': 'Y', '一': 'Y', '壹': 'Y', '医': 'Y', '揖': 'Y', '铱': 'Y', '依': 'Y', '伊': 'Y', '衣': 'Y', '颐': 'Y', '夷': 'Y', '遗': 'Y', '移': 'Y', '仪': 'Y', '胰': 'Y', '疑': 'Y', '沂': 'Y', '宜': 'Y', '姨': 'Y', '彝': 'Y', '椅': 'Y', '蚁': 'Y', '倚': 'Y', '已': 'Y', '乙': 'Y', '矣': 'Y', '以': 'Y', '艺': 'Y', '抑': 'Y', '易': 'Y', '邑': 'Y', '屹': 'Y', '亿': 'Y', '役': 'Y', '臆': 'Y', '逸': 'Y', '肄': 'Y', '疫': 'Y', '亦': 'Y', '裔': 'Y', '意': 'Y', '毅': 'Y', '忆': 'Y', '义': 'Y', '益': 'Y', '溢': 'Y', '诣': 'Y', '议': 'Y', '谊': 'Y', '译': 'Y', '异': 'Y', '翼': 'Y', '翌': 'Y', '绎': 'Y', '茵': 'Y', '荫': 'Y', '因': 'Y', '殷': 'Y', '音': 'Y', '阴': 'Y', '姻': 'Y', '吟': 'Y', '银': 'Y', '淫': 'Y', '寅': 'Y', '饮': 'Y', '尹': 'Y', '引': 'Y', '隐': 'Y', '印': 'Y', '英': 'Y', '樱': 'Y', '婴': 'Y', '鹰': 'Y', '应': 'Y', '缨': 'Y', '莹': 'Y', '萤': 'Y', '营': 'Y', '荧': 'Y', '蝇': 'Y', '迎': 'Y', '赢': 'Y', '盈': 'Y', '影': 'Y', '颖': 'Y', '硬': 'Y', '映': 'Y', '哟': 'Y', '拥': 'Y', '佣': 'Y', '臃': 'Y', '痈': 'Y', '庸': 'Y', '雍': 'Y', '踊': 'Y', '蛹': 'Y', '咏': 'Y', '泳': 'Y', '涌': 'Y', '永': 'Y', '恿': 'Y', '勇': 'Y', '用': 'Y', '幽': 'Y', '优': 'Y', '悠': 'Y', '忧': 'Y', '尤': 'Y', '由': 'Y', '邮': 'Y', '铀': 'Y', '犹': 'Y', '油': 'Y', '游': 'Y', '酉': 'Y', '有': 'Y', '友': 'Y', '右': 'Y', '佑': 'Y', '釉': 'Y', '诱': 'Y', '又': 'Y', '幼': 'Y', '迂': 'Y', '淤': 'Y', '于': 'Y', '盂': 'Y', '榆': 'Y', '虞': 'Y', '愚': 'Y', '舆': 'Y', '余': 'Y', '俞': 'Y', '逾': 'Y', '鱼': 'Y', '愉': 'Y', '渝': 'Y', '渔': 'Y', '隅': 'Y', '予': 'Y', '娱': 'Y', '雨': 'Y', '与': 'Y', '屿': 'Y', '禹': 'Y', '宇': 'Y', '语': 'Y', '羽': 'Y', '玉': 'Y', '域': 'Y', '芋': 'Y', '郁': 'Y', '吁': 'Y', '遇': 'Y', '喻': 'Y', '峪': 'Y', '御': 'Y', '愈': 'Y', '欲': 'Y', '狱': 'Y', '育': 'Y', '誉': 'Y', '浴': 'Y', '寓': 'Y', '裕': 'Y', '预': 'Y', '豫': 'Y', '驭': 'Y', '鸳': 'Y', '渊': 'Y', '冤': 'Y', '元': 'Y', '垣': 'Y', '袁': 'Y', '原': 'Y', '援': 'Y', '缘': 'Y', '源': 'Y', '猿': 'Y', '辕': 'Y', '园': 'Y', '员': 'Y', '圆': 'Y', '禹': 'Y', '远': 'Y', '苑': 'Y', '愿': 'Y', '怨': 'Y', '院': 'Y', '曰': 'Y', '约': 'Y', '越': 'Y', '跃': 'Y', '钥': 'Y', '岳': 'Y', '粤': 'Y', '月': 'Y', '悦': 'Y', '阅': 'Y', '耘': 'Y', '云': 'Y', '郧': 'Y', '匀': 'Y', '陨': 'Y', '允': 'Y', '运': 'Y', '蕴': 'Y', '酝': 'Y', '晕': 'Y', '韵': 'Y', '孕': 'Y',
                // Z
                '杂': 'Z', '栽': 'Z', '哉': 'Z', '灾': 'Z', '宰': 'Z', '载': 'Z', '再': 'Z', '在': 'Z', '咱': 'Z', '攒': 'Z', '暂': 'Z', '赞': 'Z', '赃': 'Z', '脏': 'Z', '葬': 'Z', '遭': 'Z', '糟': 'Z', '凿': 'Z', '藻': 'Z', '枣': 'Z', '早': 'Z', '澡': 'Z', '蚤': 'Z', '躁': 'Z', '噪': 'Z', '造': 'Z', '皂': 'Z', '灶': 'Z', '燥': 'Z', '责': 'Z', '择': 'Z', '则': 'Z', '泽': 'Z', '贼': 'Z', '怎': 'Z', '增': 'Z', '憎': 'Z', '曾': 'Z', '赠': 'Z', '扎': 'Z', '喳': 'Z', '渣': 'Z', '札': 'Z', '轧': 'Z', '铡': 'Z', '闸': 'Z', '眨': 'Z', '栅': 'Z', '榨': 'Z', '咋': 'Z', '乍': 'Z', '炸': 'Z', '诈': 'Z', '摘': 'Z', '窄': 'Z', '寨': 'Z', '瞻': 'Z', '毡': 'Z', '詹': 'Z', '粘': 'Z', '沾': 'Z', '盏': 'Z', '斩': 'Z', '辗': 'Z', '崭': 'Z', '展': 'Z', '蘸': 'Z', '栈': 'Z', '占': 'Z', '战': 'Z', '站': 'Z', '湛': 'Z', '绽': 'Z', '樟': 'Z', '章': 'Z', '彰': 'Z', '漳': 'Z', '张': 'Z', '掌': 'Z', '涨': 'Z', '杖': 'Z', '丈': 'Z', '帐': 'Z', '账': 'Z', '仗': 'Z', '胀': 'Z', '瘴': 'Z', '障': 'Z', '招': 'Z', '昭': 'Z', '找': 'Z', '沼': 'Z', '赵': 'Z', '照': 'Z', '罩': 'Z', '兆': 'Z', '肇': 'Z', '召': 'Z', '遮': 'Z', '折': 'Z', '哲': 'Z', '蛰': 'Z', '辙': 'Z', '者': 'Z', '锗': 'Z', '蔗': 'Z', '这': 'Z', '浙': 'Z', '珍': 'Z', '斟': 'Z', '真': 'Z', '甄': 'Z', '砧': 'Z', '臻': 'Z', '贞': 'Z', '针': 'Z', '侦': 'Z', '枕': 'Z', '疹': 'Z', '诊': 'Z', '震': 'Z', '振': 'Z', '镇': 'Z', '阵': 'Z', '蒸': 'Z', '挣': 'Z', '睁': 'Z', '征': 'Z', '狰': 'Z', '争': 'Z', '怔': 'Z', '整': 'Z', '拯': 'Z', '正': 'Z', '政': 'Z', '帧': 'Z', '症': 'Z', '郑': 'Z', '证': 'Z', '芝': 'Z', '枝': 'Z', '支': 'Z', '吱': 'Z', '蜘': 'Z', '知': 'Z', '肢': 'Z', '脂': 'Z', '汁': 'Z', '之': 'Z', '织': 'Z', '职': 'Z', '直': 'Z', '植': 'Z', '殖': 'Z', '执': 'Z', '值': 'Z', '侄': 'Z', '址': 'Z', '指': 'Z', '止': 'Z', '趾': 'Z', '只': 'Z', '旨': 'Z', '纸': 'Z', '志': 'Z', '挚': 'Z', '掷': 'Z', '至': 'Z', '致': 'Z', '置': 'Z', '帜': 'Z', '峙': 'Z', '制': 'Z', '智': 'Z', '秩': 'Z', '稚': 'Z', '质': 'Z', '炙': 'Z', '痔': 'Z', '滞': 'Z', '治': 'Z', '峙': 'Z', '适': 'Z', '市': 'S', '式': 'S', '事': 'S', '柿': 'S', '士': 'S', '氏': 'S', '世': 'S', '仕': 'S', '市': 'S', '示': 'S', '式': 'S', '势': 'S', '视': 'S', '试': 'S', '收': 'S', '手': 'S', '首': 'S', '守': 'S', '寿': 'S', '授': 'S', '售': 'S', '受': 'S', '瘦': 'S', '兽': 'S', '蔬': 'S', '枢': 'S', '梳': 'S', '殊': 'S', '抒': 'S', '输': 'S', '叔': 'S', '舒': 'S', '淑': 'S', '疏': 'S', '书': 'S', '赎': 'S', '孰': 'S', '熟': 'S', '薯': 'S', '暑': 'S', '曙': 'S', '署': 'S', '蜀': 'S', '黍': 'S', '鼠': 'S', '属': 'S', '术': 'S', '述': 'S', '树': 'S', '束': 'S', '戍': 'S', '竖': 'S', '墅': 'S', '庶': 'S', '数': 'S', '漱': 'S', '恕': 'S', '刷': 'S', '耍': 'S', '摔': 'S', '衰': 'S', '甩': 'S', '帅': 'S', '栓': 'S', '拴': 'S', '霜': 'S', '双': 'S', '爽': 'S', '谁': 'S', '水': 'S', '睡': 'S', '税': 'S', '吮': 'S', '瞬': 'S', '顺': 'S', '舜': 'S', '说': 'S', '硕': 'S', '朔': 'S', '烁': 'S', '斯': 'S', '撕': 'S', '嘶': 'S', '思': 'S', '私': 'S', '司': 'S', '丝': 'S', '死': 'S', '肆': 'S', '寺': 'S', '嗣': 'S', '四': 'S', '伺': 'S', '似': 'S', '饲': 'S', '巳': 'S', '松': 'S', '耸': 'S', '怂': 'S', '颂': 'S', '送': 'S', '宋': 'S', '讼': 'S', '诵': 'S', '搜': 'S', '艘': 'S', '擞': 'S', '嗽': 'S', '苏': 'S', '酥': 'S', '俗': 'S', '素': 'S', '速': 'S', '粟': 'S', '僳': 'S', '塑': 'S', '溯': 'S', '宿': 'S', '诉': 'S', '肃': 'S', '酸': 'S', '蒜': 'S', '算': 'S', '虽': 'S', '隋': 'S', '随': 'S', '绥': 'S', '髓': 'S', '碎': 'S', '岁': 'S', '穗': 'S', '遂': 'S', '隧': 'S', '祟': 'S', '孙': 'S', '损': 'S', '笋': 'S', '蓑': 'S', '梭': 'S', '唆': 'S', '缩': 'S', '琐': 'S', '索': 'S', '锁': 'S'
            };
            
            if (!str || str.length === 0) return '#';
            
            const firstChar = str.charAt(0);
            
            // 如果是英文字母，直接返回大写
            if (/[a-zA-Z]/.test(firstChar)) {
                return firstChar.toUpperCase();
            }
            
            // 如果是数字，归为#组
            if (/\d/.test(firstChar)) {
                return '#';
            }
            
            // 如果是中文，查找拼音首字母
            if (/[一-龥]/.test(firstChar)) {
                return pinyinMap[firstChar] || '#'; // 如果找不到映射，归为#组
            }
            
            // 其他字符归为#组
            return '#';
        }
        constructor(containerId) {
            this.container = document.getElementById(containerId);
            this.tvShows = [];
            this.optimalRows = 2; // 默认2行
            this.scrollAnimationId = null;
            
            // 无限滑动相关属性
            this.if_movable = false;
            this.mouse_x = 0;
            this.mouse_y = 0;
            this.container_width = 0;
            this.container_height = 0;
            this.poster_width = 0;
            this.poster_height = 0;
            this.scale_nums = 1;
            this.standard_width = 1440;
            this.img_data = []; // 存储每个海报的位置数据
            this.gsap = null; // GSAP动画库
            
            // 排序相关
            this.currentSortType = 'name-asc'; // 默认排序方式
            
            // 分组相关
            this.groupedTvShows = []; // 存储分组后的电视剧数据
            
            this.init();
        }

        init() {
            if (!this.container) {
                console.error('海报网格容器未找到:', this.containerId);
                return;
            }
            
            // 加载GSAP库
            this.loadGSAP().then(() => {
                this.setupEventListeners();
                this.setupResizeListener();
                this.setupInfiniteScrollListeners(); // 替换滚轮事件为无限滑动
                this.updatePosterSize(); // 初始化尺寸
            }).catch(error => {
                console.error('加载GSAP失败，使用默认滚动:', error);
                this.setupEventListeners();
                this.setupResizeListener();
                this.setupWheelListener(); // 回退到原始滚轮事件
                this.updatePosterSize(); // 初始化尺寸
            });
        }

        setupEventListeners() {
            // 监听电视剧扫描结果
            const { ipcRenderer } = require('electron');
            ipcRenderer.on('tv-shows-scanned', (event, data) => {
                this.handleTvShowsScanned(data);
            });

            // 监听排序变化事件
            document.addEventListener('sort-changed', (event) => {
                this.handleSortChange(event.detail.sortType);
            });
        }

        setupResizeListener() {
            // 监听窗口大小变化，调整海报尺寸
            let resizeTimeout;
            window.addEventListener('resize', () => {
                clearTimeout(resizeTimeout);
                resizeTimeout = setTimeout(() => {
                    this.updatePosterSize();
                    // 如果已经有渲染的网格，重新渲染以更新布局
                    if (this.tvShows.length > 0) {
                        this.renderGrid();
                    }
                }, 100);
            });
        }

        async loadGSAP() {
            return new Promise((resolve, reject) => {
                if (window.gsap) {
                    this.gsap = window.gsap;
                    resolve();
                    return;
                }
                
                // 动态加载GSAP
                const script = document.createElement('script');
                script.src = '../../../node_modules/gsap/dist/gsap.min.js';
                script.onload = () => {
                    this.gsap = window.gsap;
                    resolve();
                };
                script.onerror = () => reject(new Error('GSAP加载失败'));
                document.head.appendChild(script);
            });
        }

        setupWheelListener() {
            // 监听鼠标滚轮事件，实现平滑横向滚动
            this.container.addEventListener('wheel', (event) => {
                // 防止默认的垂直滚动行为
                event.preventDefault();
                
                // 获取滚动容器
                const scrollContainer = this.container.parentElement;
                if (!scrollContainer) return;
                
                // 简化滚动逻辑，直接使用deltaY值进行滚动
                const scrollAmount = event.deltaY * 1.5; // 稍微增加滚动灵敏度
                
                // 平滑滚动实现
                this.smoothScroll(scrollContainer, scrollAmount);
                
            }, { passive: false }); // 必须设置为非被动事件，才能调用 preventDefault()
        }

        /**
         * 设置无限滚动事件监听器
         * 包括鼠标滚轮和触摸事件支持
         */
        setupInfiniteScrollListeners() {
            if (!this.gsap) {
                console.warn('GSAP未加载，使用默认滚轮事件');
                this.setupWheelListener();
                return;
            }
            
            console.log('设置无限滑动事件监听器（鼠标滚轮模式）');
            
            // 鼠标滚轮事件 - 无限横向滚动
            this.container.addEventListener('wheel', (event) => {
                event.preventDefault(); // 阻止默认滚动行为
                
                // 将滚轮的deltaY转换为横向移动距离 - 降低灵敏度
                const scrollDistance = event.deltaY * 0.8; // 降低滚动灵敏度，使滚动更慢
                
                // 处理无限横向滚动
                this.handleInfiniteWheelScroll(scrollDistance);
            }, { passive: false });
            
            // 触摸设备支持（保持拖拽模式，因为触摸更适合拖拽）
            this.container.addEventListener('touchstart', (event) => {
                this.if_movable = true;
                this.mouse_x = event.touches[0].clientX;
                this.mouse_y = event.touches[0].clientY;
                event.preventDefault();
            });
            
            this.container.addEventListener('touchend', () => {
                this.if_movable = false;
            });
            
            this.container.addEventListener('touchmove', (event) => {
                if (this.if_movable) {
                    this.handleInfiniteScroll(event.touches[0].clientX, event.touches[0].clientY);
                    event.preventDefault();
                }
            });
        }

        /**
         * 处理触摸拖拽的无限滚动
         * @param {number} clientX - 触摸点X坐标
         * @param {number} clientY - 触摸点Y坐标
         */
        handleInfiniteScroll(clientX, clientY) {
            // 检查是否可以移动以及GSAP是否已加载
            if (!this.if_movable || !this.gsap) return;
            
            // 计算横向移动距离
            const distance_x = (clientX - this.mouse_x) / this.scale_nums;
            // 只处理横向移动，忽略纵向移动
            const distance_y = 0;
            
            // 计算循环距离参数
            const gap = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--poster-gap')) || 12;
            
            // 重新计算循环距离，按照initImagePositions中的列布局逻辑准确计算
            // 分析img_data以确定实际列布局
            let groupTitleCount = 0;
            let tvShowCount = 0;
            
            // 遍历img_data统计各类型元素数量
            for (let i = 0; i < this.img_data.length; i++) {
                const img = this.img_data[i];
                if (img.type === 'group-title') {
                    groupTitleCount++;
                } else if (img.type === 'tv-show') {
                    tvShowCount++;
                }
            }
            
            // 按照initImagePositions中的算法计算实际列数
            // 首先构建列布局结构
            const columnLayout = [];
            let currentColumn = { type: null, count: 0, items: [] };
            
            for (let i = 0; i < this.img_data.length; i++) {
                const img = this.img_data[i];
                
                if (currentColumn.type === null) {
                    currentColumn.type = img.type;
                    currentColumn.count = 1;
                    currentColumn.items = [img];
                } else if (currentColumn.type === img.type) {
                    currentColumn.count++;
                    currentColumn.items.push(img);
                } else {
                    columnLayout.push({ ...currentColumn });
                    currentColumn = {
                        type: img.type,
                        count: 1,
                        items: [img]
                    };
                }
            }
            
            if (currentColumn.type !== null) {
                columnLayout.push({ ...currentColumn });
            }
            
            // 计算实际列数（按照initImagePositions中的逻辑）
            const maxRows = this.optimalRows || 2;
            let actualCols = 0;
            
            for (const column of columnLayout) {
                if (column.type === 'group-title') {
                    // 组标题列：每个组标题占一列
                    actualCols += column.items.length;
                } else {
                    // 海报卡片列：按行数排列
                    let rows = 0;
                    for (let i = 0; i < column.items.length; i++) {
                        rows++;
                        if (rows >= maxRows) {
                            rows = 0;
                            actualCols++;
                        }
                    }
                    // 如果这列没有填满，也需要计算为一列
                    if (rows > 0) {
                        actualCols++;
                    }
                }
            }

            // 总列数 = 实际列数
            const totalCols = actualCols;
            
            // 循环距离 = 总列数 * (海报宽度 + 间隙) - 最后一个间隙
            const cycleDistance = totalCols * (this.poster_width + gap) - gap;
            
            // 更新所有海报和组标题的位置
            this.img_data.forEach((img) => {
                let duration = 0.8; // 默认动画时长
                img.mov_x += distance_x;
                // 纵向位置保持不变
                // img.mov_y += distance_y; // 禁用纵向移动
                
                // 获取当前总位置
                const total_x = img.x + img.mov_x;
                const total_y = img.y + img.mov_y;
                
                // 水平边界循环检测 - 基于实际的列宽总距离
                if (total_x > cycleDistance + this.poster_width) {
                    img.mov_x -= (cycleDistance);
                    duration = 0; // 瞬间移动
                }
                if (total_x < -this.poster_width * 2) {
                    img.mov_x += (cycleDistance );
                    duration = 0;
                }
                
                // 禁用垂直边界循环检测
                // 保持纵向位置固定，不允许循环
                
                // 停止之前的动画
                if (img.ani) img.ani.kill();
                
                // 计算新的目标位置 - 只横向移动
                const target_x = img.x + img.mov_x;
                const target_y = img.y; // 保持原始纵向位置
                
                // 应用新动画 - 只横向移动
                img.ani = this.gsap.to(img.node, {
                    x: target_x,
                    y: target_y, // 保持纵向位置不变
                    duration: duration,
                    ease: 'power4.out'
                });
            });
            
            // 更新鼠标位置
            this.mouse_x = clientX;
            this.mouse_y = clientY;
        }

        /**
         * 处理鼠标滚轮的无限滚动
         * @param {number} scrollDistance - 滚动距离
         */
        handleInfiniteWheelScroll(scrollDistance) {
            // 检查GSAP是否已加载
            if (!this.gsap) return;
            
            // 使用滚轮距离作为横向移动距离 - 进一步降低移动距离
            const distance_x = scrollDistance * 0.6 / this.scale_nums; // 降低移动距离，使滚动更慢更平滑
            
            // 使用body窗口的实时宽度作为循环距离
            const bodyWidth = document.body.clientWidth;
            // 计算循环距离参数
            const gap = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--poster-gap')) || 12;
            
            // 重新计算循环距离，按照initImagePositions中的列布局逻辑准确计算
            // 分析img_data以确定实际列布局
            let groupTitleCount = 0;
            let tvShowCount = 0;
            
            // 遍历img_data统计各类型元素数量
            for (let i = 0; i < this.img_data.length; i++) {
                const img = this.img_data[i];
                if (img.type === 'group-title') {
                    groupTitleCount++;
                } else if (img.type === 'tv-show') {
                    tvShowCount++;
                }
            }
            
            // 按照initImagePositions中的算法计算实际列数
            // 首先构建列布局结构
            const columnLayout = [];
            let currentColumn = { type: null, count: 0, items: [] };
            
            for (let i = 0; i < this.img_data.length; i++) {
                const img = this.img_data[i];
                
                if (currentColumn.type === null) {
                    currentColumn.type = img.type;
                    currentColumn.count = 1;
                    currentColumn.items = [img];
                } else if (currentColumn.type === img.type) {
                    currentColumn.count++;
                    currentColumn.items.push(img);
                } else {
                    columnLayout.push({ ...currentColumn });
                    currentColumn = {
                        type: img.type,
                        count: 1,
                        items: [img]
                    };
                }
            }
            
            if (currentColumn.type !== null) {
                columnLayout.push({ ...currentColumn });
            }
            
            // 计算实际列数（按照initImagePositions中的逻辑）
            const maxRows = this.optimalRows || 2;
            let actualCols = 0;
            
            for (const column of columnLayout) {
                if (column.type === 'group-title') {
                    // 组标题列：每个组标题占一列
                    actualCols += column.items.length;
                } else {
                    // 海报卡片列：按行数排列
                    let rows = 0;
                    for (let i = 0; i < column.items.length; i++) {
                        rows++;
                        if (rows >= maxRows) {
                            rows = 0;
                            actualCols++;
                        }
                    }
                    // 如果这列没有填满，也需要计算为一列
                    if (rows > 0) {
                        actualCols++;
                    }
                }
            }

            // 总列数 = 实际列数
            const totalCols = actualCols;
            
            // 循环距离 = 总列数 * (海报宽度 + 间隙) - 最后一个间隙
            const cycleDistance = totalCols * (this.poster_width + gap) - gap;
            
            // 调试信息
            console.log(`无限滑动调试: 组标题数=${groupTitleCount}, 海报数=${tvShowCount}, 总列数=${totalCols}, 循环距离=${cycleDistance}px, 卡片宽度=${this.poster_width}px, body宽度=${bodyWidth}px`);
            
            // 更新所有海报和组标题的位置
            this.img_data.forEach((img) => {
                let duration = 0.8; // 增加动画时长，让滚动更平滑
                img.mov_x += distance_x;
                
                // 获取当前总位置
                const total_x = img.x + img.mov_x;
                
                // 水平边界循环检测 - 修复循环逻辑，确保两个区域无缝连接
                // 右侧边界：当卡片移动到bodyWidth + 海报宽度*2时，向左移动cycleDistance距离
                if (total_x > bodyWidth + this.poster_width * 2) {
                    img.mov_x -= cycleDistance;
                    duration = 0; // 瞬间移动
                    console.log(`右侧循环: 卡片位置=${total_x}, 循环到=${img.x + img.mov_x}`);
                }
                // 左侧边界：当卡片移动到-poster_width时，向右移动cycleDistance距离
                if (total_x < -this.poster_width - this.poster_width) {
                    img.mov_x += cycleDistance;
                    duration = 0;
                    console.log(`左侧循环: 卡片位置=${total_x}, 循环到=${img.x + img.mov_x}`);
                }
                
                // 停止之前的动画
                if (img.ani) img.ani.kill();
                
                // 计算新的目标位置 - 只横向移动
                const target_x = img.x + img.mov_x;
                const target_y = img.y; // 保持原始纵向位置
                
                // 应用新动画 - 使用更平滑的缓动函数
                img.ani = this.gsap.to(img.node, {
                    x: target_x,
                    y: target_y, // 保持纵向位置不变
                    duration: duration,
                    ease: 'power3.out' // 使用更平滑的缓动函数
                });
            });
        }

        /**
         * 平滑滚动实现
         * @param {HTMLElement} scrollContainer - 滚动容器
         * @param {number} deltaX - 滚动距离
         */
        smoothScroll(scrollContainer, deltaX) {
            // 验证参数
            if (!scrollContainer || typeof deltaX !== 'number') {
                console.warn('无效的滚动参数', { scrollContainer, deltaX });
                return;
            }

            // 如果已经有滚动动画在进行，先停止它
            if (this.scrollAnimationId) {
                cancelAnimationFrame(this.scrollAnimationId);
            }
            
            const startTime = performance.now();
            const startScrollLeft = scrollContainer.scrollLeft;
            
            // 计算目标滚动位置，确保在有效范围内
            const maxScrollLeft = scrollContainer.scrollWidth - scrollContainer.clientWidth;
            let targetScrollLeft = startScrollLeft + deltaX;
            
            // 确保目标位置在有效范围内
            targetScrollLeft = Math.max(0, Math.min(targetScrollLeft, maxScrollLeft));
            
            // 如果目标位置与当前位置相同，直接返回
            if (targetScrollLeft === startScrollLeft) {
                this.scrollAnimationId = null;
                return;
            }
            
            // 缓动函数：easeOutCubic
            const easeOutCubic = (t) => {
                if (t < 0 || t > 1) return Math.min(Math.max(t, 0), 1); // 确保t在[0,1]范围内
                return 1 - Math.pow(1 - t, 3);
            };
            
            // 动画时长（毫秒）- 根据滚动距离调整
            const baseDuration = 200;
            const scrollDistance = Math.abs(deltaX);
            const duration = Math.min(baseDuration + scrollDistance * 0.05, 500); // 减少最大时长
            
            const animateScroll = (currentTime) => {
                try {
                    const elapsed = currentTime - startTime;
                    const progress = Math.min(elapsed / duration, 1);
                    
                    // 应用缓动函数
                    const easedProgress = easeOutCubic(progress);
                    
                    // 计算当前滚动位置
                    const currentScrollLeft = startScrollLeft + (targetScrollLeft - startScrollLeft) * easedProgress;
                    
                    // 应用滚动
                    scrollContainer.scrollLeft = currentScrollLeft;
                    
                    // 如果动画未完成，继续下一帧
                    if (progress < 1) {
                        this.scrollAnimationId = requestAnimationFrame(animateScroll);
                    } else {
                        this.scrollAnimationId = null;
                    }
                } catch (error) {
                    console.error('滚动动画执行出错:', error);
                    this.scrollAnimationId = null;
                }
            };
            
            // 启动动画
            this.scrollAnimationId = requestAnimationFrame(animateScroll);
        }

        // 移除惯性滚动功能，简化滚动逻辑

        /**
         * 更新海报尺寸以适应窗口大小
         */
        updatePosterSize() {
            try {
                const windowHeight = window.innerHeight;
                const windowWidth = window.innerWidth;
                
                // 获取main-content的实际尺寸
                const mainContent = this.container?.parentElement;
                if (!mainContent) {
                    console.warn('未找到main-content容器');
                    return;
                }
                
                const mainContentWidth = mainContent.clientWidth;
                const mainContentHeight = mainContent.clientHeight;
                
                // 基于main-content的实际高度计算最优行数
                const maxRows = 5;
                const minHeight = 240;
                const maxHeight = 600;
                const minGap = 12;
                
                // 计算每行最小需要的高度（海报高度 + 行间距）
                const rowGap = minGap;
                const minRowHeight = minHeight + rowGap;
                
                // 计算可用高度（基于main-content的实际高度）
                const availableHeight = mainContentHeight - 320; // 减去顶部padding
                
                // 计算最大行数
                const maxPossibleRows = Math.floor(availableHeight / (minHeight + rowGap));
                const optimalRows = Math.min(maxRows, Math.max(2, maxPossibleRows));
                
                // 根据可用高度和行数计算海报高度
                const totalRowGap = rowGap * (optimalRows - 1);
                const baseHeight = Math.max(minHeight, Math.min(maxHeight, (availableHeight - totalRowGap) / optimalRows));
                const baseWidth = baseHeight * 0.64; // 保持1:1.56的宽高比
                
                // 列间距只与海报宽度相关
                const maxGap = 20;
                const baseGap = Math.max(minGap, Math.min(maxGap, baseWidth * 0.2));
                
                // 设置CSS变量
                document.documentElement.style.setProperty('--poster-height', `${baseHeight}px`);
                document.documentElement.style.setProperty('--poster-width', `${baseWidth}px`);
                document.documentElement.style.setProperty('--poster-gap', `${baseGap}px`);
                document.documentElement.style.setProperty('--grid-rows', `${optimalRows}`);
                
                // 保存行数信息
                this.optimalRows = optimalRows;
                
                // 更新无限滑动相关尺寸
                if (this.container) {
                    this.container_width = mainContentWidth;
                    this.container_height = mainContentHeight;
                    this.poster_width = baseWidth;
                    this.poster_height = baseHeight;
                    this.scale_nums = windowWidth / this.standard_width;
                }
                
                console.log(`main-content尺寸: ${mainContentWidth}x${mainContentHeight}, 最优行数: ${optimalRows}, 海报尺寸: ${Math.round(baseWidth)}x${Math.round(baseHeight)}, 间距: ${Math.round(baseGap)}px`);
                
                // 重新初始化位置以填满新尺寸
                if (this.img_data && this.img_data.length > 0) {
                    this.initImagePositions();
                }
                
                // 更新调试信息
                this.updateDebugInfo();
            } catch (error) {
                console.error('更新海报尺寸时出错:', error);
            }
        }

        /**
         * 更新网格调试信息显示
         */
        updateDebugInfo() {
            try {
                const debugDiv = document.getElementById('grid-debug-info');
                if (debugDiv && this.container) {
                    debugDiv.innerHTML = `
                        <div>Grid Debug Info:</div>
                        <div>总卡片数: ${this.tvShows.length}</div>
                        <div>行数: ${this.optimalRows || 2}</div>
                        <div>窗口尺寸: ${window.innerWidth}x${window.innerHeight}</div>
                        <div>容器宽: ${this.container.clientWidth}px</div>
                        <div>容器高: ${this.container.clientHeight}px</div>
                        <div>海报宽: ${getComputedStyle(document.documentElement).getPropertyValue('--poster-width')}</div>
                        <div>海报高: ${getComputedStyle(document.documentElement).getPropertyValue('--poster-height')}</div>
                        <div>间距: ${getComputedStyle(document.documentElement).getPropertyValue('--poster-gap')}</div>
                        <div>布局: 横向行、竖列排序</div>
                        <div>CSS Grid: grid-auto-flow: row; grid-template-columns: repeat(auto-fill, var(--poster-width));</div>
                    `;
                }
            } catch (error) {
                console.error('更新调试信息时出错:', error);
            }
        }

        /**
         * 处理电视剧扫描结果
         * @param {Object} data - 扫描结果数据
         */
        handleTvShowsScanned(data) {
            try {
                const loading = document.getElementById('loading');
                const error = document.getElementById('error');
                const empty = document.getElementById('empty');
                
                if (data.error) {
                    this.showError(data.error);
                    return;
                }
                
                this.tvShows = data.tvShows || [];
                
                if (this.tvShows.length === 0) {
                    this.showEmptyState();
                    return;
                }
                
                this.hideLoading();
                this.updatePosterSize(); // 确保渲染前尺寸正确
                this.renderGrid();
            } catch (error) {
                console.error('处理电视剧扫描结果时出错:', error);
                this.showError('处理电视剧数据时发生错误');
            }
        }

        /**
         * 处理排序变化
         * @param {string} sortType - 排序类型
         */
        handleSortChange(sortType) {
            try {
                console.log('排序方式改变:', sortType);
                this.currentSortType = sortType;
                
                // 重新渲染网格以应用新的排序
                if (this.tvShows && this.tvShows.length > 0) {
                    this.renderGrid();
                }
            } catch (error) {
                console.error('处理排序变化时出错:', error);
            }
        }

        /**
         * 排序电视剧列表
         * @param {Array} tvShows - 电视剧列表
         * @returns {Array} 排序后的电视剧列表
         */
        sortTvShows(tvShows) {
            if (!tvShows || tvShows.length === 0) return tvShows;

            try {
                const sortedShows = [...tvShows]; // 创建副本避免修改原数组

                switch (this.currentSortType) {
                    case 'name-asc':
                        return sortedShows.sort((a, b) => a.name.localeCompare(b.name, 'zh-CN'));
                    
                    case 'name-desc':
                        return sortedShows.sort((a, b) => b.name.localeCompare(a.name, 'zh-CN'));
                    
                    case 'date-asc':
                        // 按修改时间升序 (旧→新)
                        return sortedShows.sort((a, b) => {
                            const timeA = this.getTvShowModifyTime(a);
                            const timeB = this.getTvShowModifyTime(b);
                            return timeA - timeB;
                        });
                    
                    case 'date-desc':
                        // 按修改时间降序 (新→旧)
                        return sortedShows.sort((a, b) => {
                            const timeA = this.getTvShowModifyTime(a);
                            const timeB = this.getTvShowModifyTime(b);
                            return timeB - timeA;
                        });
                    
                    case 'seasons-asc':
                        // 按季数升序 (少→多)
                        return sortedShows.sort((a, b) => {
                            const seasonsA = this.getTvShowSeasonsCount(a);
                            const seasonsB = this.getTvShowSeasonsCount(b);
                            return seasonsA - seasonsB;
                        });
                    
                    case 'seasons-desc':
                        // 按季数降序 (多→少)
                        return sortedShows.sort((a, b) => {
                            const seasonsA = this.getTvShowSeasonsCount(a);
                            const seasonsB = this.getTvShowSeasonsCount(b);
                            return seasonsB - seasonsA;
                        });
                    
                    default:
                        return sortedShows;
                }
            } catch (error) {
                console.error('排序电视剧列表时出错:', error);
                return tvShows; // 返回原始列表
            }
        }

        /**
         * 获取电视剧的修改时间
         * @param {Object} tvShow - 电视剧对象
         * @returns {number} 修改时间的时间戳
         */
        getTvShowModifyTime(tvShow) {
            if (!tvShow || !tvShow.firstEpisode || !tvShow.firstEpisode.modifiedTime) {
                return 0;
            }
            try {
                return new Date(tvShow.firstEpisode.modifiedTime).getTime();
            } catch (error) {
                console.error('获取电视剧修改时间时出错:', error);
                return 0;
            }
        }

        /**
         * 获取电视剧的季数
         * @param {Object} tvShow - 电视剧对象
         * @returns {number} 季数
         */
        getTvShowSeasonsCount(tvShow) {
            if (!tvShow || !tvShow.seasons || !Array.isArray(tvShow.seasons)) {
                return 0;
            }
            return tvShow.seasons.length;
        }

        /**
         * 根据当前排序类型对电视剧进行分组
         * @param {Array} tvShows - 电视剧列表
         * @returns {Array} 分组后的电视剧数据
         */
        groupTvShows(tvShows) {
            if (!tvShows || tvShows.length === 0) return [];

            // 创建分组映射
            const groups = new Map();
            
            // 根据排序类型确定分组键
            const getGroupKey = (tvShow) => {
                switch (this.currentSortType) {
                    case 'name-asc':
                    case 'name-desc':
                        // 按首字母分组（包括拼音首字母）
                        return this.getPinyinFirstLetter(tvShow.name);
                    
                    case 'date-asc':
                    case 'date-desc':
                        // 按年份分组
                        const modifyTime = this.getTvShowModifyTime(tvShow);
                        if (modifyTime > 0) {
                            const year = new Date(modifyTime).getFullYear();
                            return year.toString();
                        }
                        return '未知';
                        
                    case 'seasons-asc':
                    case 'seasons-desc':
                        // 按季数分组
                        const seasonsCount = this.getTvShowSeasonsCount(tvShow);
                        if (seasonsCount === 0) return '无季数';
                        if (seasonsCount === 1) return '1季';
                        if (seasonsCount <= 5) return `${seasonsCount}季`;
                        return '5季以上';
                        
                    default:
                        return '默认';
                }
            };
            
            // 将电视剧分配到各组
            tvShows.forEach(tvShow => {
                const groupKey = getGroupKey(tvShow);
                if (!groups.has(groupKey)) {
                    groups.set(groupKey, []);
                }
                groups.get(groupKey).push(tvShow);
            });
            
            // 转换为数组格式并排序
            const groupedArray = [];
            
            // 根据排序类型确定组的排序方式
            let sortedGroupKeys = [];
            switch (this.currentSortType) {
                case 'name-asc':
                    // 按字母顺序排序组（包括拼音首字母）
                    sortedGroupKeys = Array.from(groups.keys()).sort((a, b) => {
                        // #组排在最后
                        if (a === '#' && b !== '#') return 1;
                        if (a !== '#' && b === '#') return -1;
                        // 其他按字母顺序排序
                        return a.localeCompare(b, 'zh-CN');
                    });
                    break;
                case 'name-desc':
                    // 按字母倒序排序组（包括拼音首字母）
                    sortedGroupKeys = Array.from(groups.keys()).sort((a, b) => {
                        // #组排在最后
                        if (a === '#' && b !== '#') return 1;
                        if (a !== '#' && b === '#') return -1;
                        // 其他按字母倒序排序
                        return b.localeCompare(a, 'zh-CN');
                    });
                    break;
                case 'date-asc':
                    // 按年份升序排序组
                    sortedGroupKeys = Array.from(groups.keys()).sort((a, b) => {
                        if (a === '未知') return 1;
                        if (b === '未知') return -1;
                        return parseInt(a) - parseInt(b);
                    });
                    break;
                case 'date-desc':
                    // 按年份降序排序组
                    sortedGroupKeys = Array.from(groups.keys()).sort((a, b) => {
                        if (a === '未知') return 1;
                        if (b === '未知') return -1;
                        return parseInt(b) - parseInt(a);
                    });
                    break;
                case 'seasons-asc':
                    // 按季数升序排序组
                    sortedGroupKeys = ['无季数', '1季', '2季', '3季', '4季', '5季', '5季以上'];
                    break;
                case 'seasons-desc':
                    // 按季数降序排序组
                    sortedGroupKeys = ['5季以上', '5季', '4季', '3季', '2季', '1季', '无季数'];
                    break;
                default:
                    sortedGroupKeys = Array.from(groups.keys());
            }
            
            // 构建最终的分组数组
            sortedGroupKeys.forEach(key => {
                if (groups.has(key)) {
                    groupedArray.push({
                        title: key,
                        items: groups.get(key)
                    });
                }
            });
            
            return groupedArray;
        }

        /**
         * 显示错误信息
         * @param {string} message - 错误消息
         */
        showError(message) {
            try {
                const loading = document.getElementById('loading');
                const error = document.getElementById('error');
                
                if (loading) loading.style.display = 'none';
                if (error) {
                    error.style.display = 'block';
                    error.textContent = message;
                }
            } catch (err) {
                console.error('显示错误信息时出错:', err);
            }
        }

        /**
         * 显示空状态
         */
        showEmptyState() {
            try {
                const loading = document.getElementById('loading');
                const empty = document.getElementById('empty');
                
                if (loading) loading.style.display = 'none';
                if (empty) empty.style.display = 'block';
            } catch (err) {
                console.error('显示空状态时出错:', err);
            }
        }

        /**
         * 隐藏加载状态
         */
        hideLoading() {
            try {
                const loading = document.getElementById('loading');
                if (loading) loading.style.display = 'none';
            } catch (err) {
                console.error('隐藏加载状态时出错:', err);
            }
        }

        /**
         * 渲染网格（支持分组显示）
         */
        renderGrid() {
            try {
                this.container.style.display = 'grid';
                this.container.innerHTML = '';
                
                // 根据是否支持无限滑动添加相应的class
                if (this.gsap) {
                    this.container.classList.add('infinite-scroll');
                }
                
                // 确保行数已计算，如果没有则使用默认2行
                const rows = this.optimalRows || 2;
                
                // 定义测试颜色数组
                const testColors = [
                    '#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#ffeaa7',
                    '#dda0dd', '#98d8c8', '#f7dc6f', '#bb8fce', '#85c1e9',
                    '#f8c471', '#82e0aa', '#f1948a', '#85c1e9', '#d7bde2',
                    '#aed6f1', '#f9e79f', '#abebc6', '#fad7a0', '#e8daef'
                ];
                
                console.log(`渲染网格，总电视剧数: ${this.tvShows.length}, 行数: ${rows}, 排序方式: ${this.currentSortType}`);
                console.log(`容器尺寸: ${this.container.clientWidth}x${this.container.clientHeight}`);
                console.log(`CSS变量: --poster-width: ${getComputedStyle(document.documentElement).getPropertyValue('--poster-width')}, --poster-height: ${getComputedStyle(document.documentElement).getPropertyValue('--poster-height')}, --poster-gap: ${getComputedStyle(document.documentElement).getPropertyValue('--poster-gap')}`);
                
                // 重置图片数据数组
                this.img_data = [];
                
                // 应用排序
                const sortedShows = this.sortTvShows(this.tvShows);
                
                // 对排序后的电视剧进行分组
                this.groupedTvShows = this.groupTvShows(sortedShows);
                
                // 收集所有要渲染的项目（包括分组标题和电视剧卡片）
                let allItemsToRender = [];
                
                // 遍历分组，添加组标题和电视剧卡片
                this.groupedTvShows.forEach(group => {
                    // 添加组标题
                    allItemsToRender.push({
                        type: 'group-title',
                        title: group.title,
                        group: group
                    });
                    
                    // 添加组内的电视剧卡片
                    group.items.forEach(tvShow => {
                        allItemsToRender.push({
                            type: 'tv-show',
                            data: tvShow
                        });
                    });
                });
                
                // 直接使用原始项目列表
                let itemsToRender = [...allItemsToRender];
                
                // 按顺序渲染所有项目（横向行、竖列排序）
                itemsToRender.forEach((item, index) => {
                    let element;
                    
                    if (item.type === 'group-title') {
                        // 创建组标题元素
                        element = this.createGroupTitle(item.title);
                    } else if (item.type === 'tv-show') {
                        // 创建电视剧卡片元素
                        element = this.createPosterCard(item.data);
                        // 为每个卡片添加测试颜色和调试信息
                        element.style.backgroundColor = testColors[index % testColors.length];
                        element.style.border = '2px solid #ffffff';
                        element.style.position = 'relative';
                        
                        // 添加调试信息
                        const debugInfo = document.createElement('div');
                        debugInfo.style.cssText = `
                            position: absolute;
                            top: 5px;
                            left: 5px;
                            background: rgba(0,0,0,0.8);
                            color: white;
                            padding: 2px 4px;
                            font-size: 10px;
                            border-radius: 3px;
                            z-index: 10;
                        `;
                        debugInfo.textContent = `${index + 1}`;
                        element.appendChild(debugInfo);
                    }
                    
                    if (element) {
                        this.container.appendChild(element);
                        
                        // 初始化图片数据（用于无限滑动），电视剧卡片和组标题都需要参与
                        if (item.type === 'tv-show' || item.type === 'group-title') {
                            this.img_data.push({
                                node: element,
                                x: 0, // 将在初始化后更新
                                y: 0, // 将在初始化后更新
                                mov_x: 0,
                                mov_y: 0,
                                ani: null,
                                type: item.type // 标记类型，用于区分处理
                            });
                        }
                    }
                });
                
                // 初始化图片位置数据（延迟执行，确保DOM渲染完成）
                setTimeout(() => {
                    this.initImagePositions();
                }, 100);
                
                // 添加网格调试信息
                let debugDiv = document.getElementById('grid-debug-info');
                if (!debugDiv) {
                    debugDiv = document.createElement('div');
                    debugDiv.id = 'grid-debug-info';
                    debugDiv.style.cssText = `
                        position: fixed;
                        top: 10px;
                        right: 10px;
                        background: rgba(0,0,0,0.9);
                        color: white;
                        padding: 10px;
                        border-radius: 5px;
                        font-family: monospace;
                        font-size: 12px;
                        z-index: 1000;
                        border: 1px solid #666;
                    `;
                    document.body.appendChild(debugDiv);
                }
                
                this.updateDebugInfo();
            } catch (error) {
                console.error('渲染网格时出错:', error);
                this.showError('渲染电视剧网格时发生错误');
            }
        }
        
        initImagePositions() {
            if (!this.gsap || !this.img_data.length) return;
            
            console.log('初始化图片位置，海报数量:', this.img_data.length);
            
            // 获取容器的实际尺寸
            const containerRect = this.container.getBoundingClientRect();
            const posterWidth = this.poster_width;
            const posterHeight = this.poster_height;
            const gap = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--poster-gap')) || 12;
            
            // 获取main-content的实际尺寸
            const mainContent = this.container.parentElement;
            if (!mainContent) return;
            
            // 计算main-content的可用空间
            const mainContentWidth = mainContent.clientWidth;
            const mainContentHeight = mainContent.clientHeight - 40; // 减去顶部padding
            
            // 计算最优的卡片布局 - 横向行、竖列排序
            const maxCardsPerRow = Math.floor(mainContentWidth / (posterWidth + gap));
            const maxRows = this.optimalRows || 2;
            
            // 如果卡片数量不足以填满区域，计算居中对齐的偏移
            const totalCardsWidth = maxCardsPerRow * (posterWidth + gap) - gap;
            const horizontalOffset = Math.max(0, (mainContentWidth - totalCardsWidth) / 2);
            
            // 计算垂直居中对齐
            const totalCardsHeight = maxRows * (posterHeight + gap) - gap;
            const verticalOffset = Math.max(0, (mainContentHeight - totalCardsHeight) / 2);
            
            // 重置所有位置，需要区分组标题和电视剧卡片
            // 为每个元素类型分别计算位置
            let currentCol = 0; // 当前列索引
            let currentRow = 0; // 当前行索引
            
            // 首先，需要分析img_data以确定布局结构
            // 创建一个映射来跟踪每一列的元素类型和数量
            const columnLayout = []; // 存储每列的元素信息
            let currentColumn = { type: null, count: 0, items: [] };
            
            // 分析img_data以确定每列的布局
            for (let i = 0; i < this.img_data.length; i++) {
                const img = this.img_data[i];
                
                // 如果当前元素与当前列的元素类型不同（或者这是第一个元素），开始新列
                if (currentColumn.type === null) {
                    // 这是第一个元素
                    currentColumn.type = img.type;
                    currentColumn.count = 1;
                    currentColumn.items = [img];
                } else if (currentColumn.type === img.type) {
                    // 当前元素与当前列的元素类型相同，继续添加
                    currentColumn.count++;
                    currentColumn.items.push(img);
                } else {
                    // 当前元素与当前列的元素类型不同，保存当前列并开始新列
                    columnLayout.push({ ...currentColumn });
                    currentColumn = {
                        type: img.type,
                        count: 1,
                        items: [img]
                    };
                }
            }
            
            // 添加最后一个列
            if (currentColumn.type !== null) {
                columnLayout.push({ ...currentColumn });
            }
            
            // 现在根据列布局设置每个元素的位置
            let totalXOffset = -posterWidth; // 从左侧开始
            let columnIndex = 0;
            
            for (const column of columnLayout) {
                if (column.type === 'group-title') {
                    // 组标题列：所有组标题占据相同位置（垂直居中）
                    for (let i = 0; i < column.items.length; i++) {
                        const img = column.items[i];
                        img.x = totalXOffset;
                        img.y = verticalOffset; // 垂直居中
                        img.mov_x = 0;
                        img.mov_y = 0;
                        
                        // 设置初始位置，无动画
                        if (this.gsap) {
                            this.gsap.set(img.node, {
                                x: img.x,
                                y: img.y,
                                position: 'absolute'
                            });
                        }
                    }
                    // 移动到下一列
                    totalXOffset += posterWidth + gap;
                } else { // 'tv-show' 列
                    // 海报卡片列：按网格排列
                    let row = 0;
                    for (let i = 0; i < column.items.length; i++) {
                        const img = column.items[i];
                        img.x = totalXOffset;
                        img.y = verticalOffset + row * (posterHeight + gap);
                        img.mov_x = 0;
                        img.mov_y = 0;
                        
                        // 设置初始位置，无动画
                        if (this.gsap) {
                            this.gsap.set(img.node, {
                                x: img.x,
                                y: img.y,
                                position: 'absolute'
                            });
                        }
                        
                        row++;
                        // 如果达到最大行数，移到下一列
                        if (row >= maxRows) {
                            row = 0;
                            totalXOffset += posterWidth + gap;
                        }
                    }
                    
                    // 如果这列没有填满，也需要移动到下一列
                    if (row > 0) {
                        totalXOffset += posterWidth + gap;
                    }
                }
            }
            
            // 只在无限滑动模式下才需要设置固定尺寸
            if (this.gsap && this.container.classList.contains('infinite-scroll')) {
                // 设置容器尺寸为main-content的完整尺寸，实现填满效果
                this.container.style.width = mainContentWidth + 'px';
                this.container.style.height = mainContentHeight + 'px';
                
                console.log('填满main-content区域，尺寸:', mainContentWidth, 'x', mainContentHeight);
                console.log('卡片布局:', maxCardsPerRow, '列 x', maxRows, '行');
                console.log('偏移量:', horizontalOffset, 'x', verticalOffset);
            } else {
                // 普通网格模式下，让CSS Grid自动处理布局
                this.container.style.width = '100%';
                this.container.style.height = '100%';
            }
        }

        createPosterCard(tvShow) {
            const card = document.createElement('div');
            card.className = 'poster-card';
            
            const img = document.createElement('img');
            img.className = 'poster-image';
            img.alt = tvShow.name;
            
            if (tvShow.poster) {
                img.src = `file://${tvShow.poster}`;
            } else {
                img.style.background = 'linear-gradient(135deg, #2a2a2a, #404040)';
                img.style.display = 'flex';
                img.style.alignItems = 'center';
                img.style.justifyContent = 'center';
                img.style.color = 'rgba(255, 255, 255, 0.6)';
                img.style.fontSize = '14px';
                img.style.fontWeight = '500';
                img.textContent = '暂无海报';
            }
            
            const button = document.createElement('button');
            button.className = 'poster-button';
            button.textContent = tvShow.name;
            
            card.addEventListener('click', () => {
                this.playTvShow(tvShow);
            });
            
            card.appendChild(img);
            card.appendChild(button);
            
            return card;
        }

        /**
         * 创建组标题元素
         * @param {string} title - 组标题
         * @returns {HTMLElement} 组标题元素
         */
        createGroupTitle(title) {
            const groupTitle = document.createElement('div');
            groupTitle.className = 'group-title';
            
            const titleElement = document.createElement('h2');
            titleElement.className = 'group-title-text';
            titleElement.textContent = title;
            
            groupTitle.appendChild(titleElement);
            
            // 添加样式，使其占据竖向一列的空间
            groupTitle.style.cssText = `
                width: var(--poster-width);
                height: calc((var(--poster-height) + var(--poster-gap)) * var(--grid-rows, 2) - var(--poster-gap));
                display: flex;
                align-items: center;
                justify-content: center;
                flex-shrink: 0;
                position: relative;
                background: rgba(26, 26, 26, 0.8);
                border-radius: 12px;
                backdrop-filter: blur(10px);
                border: 1px solid rgba(255, 255, 255, 0.1);
                box-shadow: 0 4px 20px rgba(0,0,0,0.3);
                box-sizing: border-box;
            `;
            
            titleElement.style.cssText = `
                font-size: 24px;
                font-weight: 600;
                color: #FFFFFF;
                margin: 0;
                position: relative;
                display: inline-block;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
                width: 100%;
                text-align: center;
            `;
            
            // 添加装饰线
            const underline = document.createElement('div');
            underline.style.cssText = `
                position: absolute;
                bottom: 5px;
                left: 50%;
                transform: translateX(-50%);
                width: 60px;
                height: 3px;
                background: linear-gradient(90deg, #0078d4, transparent);
                border-radius: 2px;
            `;
            groupTitle.appendChild(underline);
            
            return groupTitle;
        }

        playTvShow(tvShow) {
            const { ipcRenderer } = require('electron');
            
            console.log('点击电视剧:', tvShow.name);
            console.log('路径:', tvShow.path);
            console.log('第一集路径:', tvShow.firstEpisode);
            
            if (tvShow.firstEpisode) {
                ipcRenderer.send('play-tv-show', {
                    name: tvShow.name,
                    path: tvShow.path,
                    firstEpisode: tvShow.firstEpisode
                });
            } else {
                alert(`未找到 ${tvShow.name} 的第一季第一集视频文件`);
            }
        }

        updateTvShows(tvShows) {
            this.tvShows = tvShows;
            this.renderGrid();
        }

        clear() {
            this.tvShows = [];
            this.container.innerHTML = '';
            
            const loading = document.getElementById('loading');
            const error = document.getElementById('error');
            const empty = document.getElementById('empty');
            
            if (loading) loading.style.display = 'block';
            if (error) error.style.display = 'none';
            if (empty) empty.style.display = 'none';
        }

        destroy() {
            // 清理所有动画和定时器
            if (this.scrollAnimationId) {
                cancelAnimationFrame(this.scrollAnimationId);
                this.scrollAnimationId = null;
            }
            
            // 清理GSAP动画
            if (this.gsap && this.img_data) {
                this.img_data.forEach(img => {
                    if (img.ani) {
                        img.ani.kill();
                    }
                });
            }
            
            this.container.innerHTML = '';
            this.tvShows = [];
            this.img_data = [];
        }
    }

    module.exports = PosterGrid;

})();